<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>丧心病狂的js面试题</title>
    <link href="/2023/12/01/%E4%B8%A7%E5%BF%83%E7%97%85%E7%8B%82%E7%9A%84js%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2023/12/01/%E4%B8%A7%E5%BF%83%E7%97%85%E7%8B%82%E7%9A%84js%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 下面代码输出什么？</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(++[[]][+[]] + [+[]]);<br></code></pre></td></tr></table></figure><p>这算不上是一道好的面试题。虽然我认为这样的面试题不值得提倡，但是知识点还是要掌握。</p><h1 id="拆解问题"><a href="#拆解问题" class="headerlink" title="拆解问题"></a>拆解问题</h1><p>把打印的表达式拆分成<code>++[[]][+[]]</code> 、 <code>+</code>、 <code>[+[]]</code>三部分。注意这不是随意地拆分，是根据JavaScript表达式及运算符号优先级进行拆分的。同样地，将拆分后得到地表达式按照同样的方法逐步拆分运算。</p><h2 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h2><p>先来看第一部分<br><code>++[[]][+[]]</code> 继续拆分 <code>++</code> <code>[[]]</code> <code>[+[]]</code></p><ul><li><code>[[]]</code>，这是一个数组，数组只有一个元素，这个元素是一个空数组<code>[]</code>。</li><li>然后来看 <code>[+[]]</code>，这也是一个数组，数组只有一个元素。运算后得到<code>[0]</code></li><li>组合<code>[[]][+[]]</code>得到 <code>[[]][0]</code>，意思是取得数组<code>[[]]</code>的第0个元素，运算结果为<code>[]</code></li><li><code>++[]</code> 运算结果就是数字类型的值1</li></ul><h2 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h2><p>再来看第三部分<br><code>[+[]]</code> 运算过程在<code>step 1</code>已经分析过了，运算后结果为<code>[0]</code>。</p><h2 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h2><p>然后把<code>+</code>前后的运算结果组合起来<code>1 + [0]</code>，结果为字符传类型的<code>&quot;10&quot;</code>。</p><h1 id="计算过程"><a href="#计算过程" class="headerlink" title="计算过程"></a>计算过程</h1><p>前面简单说明了表达式拆分及计算结果，现在来详细解释一下JavaScript中运算符的类型转换规则及取值过程。</p><h2 id="计算"><a href="#计算" class="headerlink" title="计算 [+[]]"></a>计算 <code>[+[]]</code></h2><ul><li>来看 <code>[+[]]</code>中 <code>+[]</code>的计算。<code>+[]</code> 意思是把数据（这里是一个空数组）转换成数字</li><li>这个转换过程就是JavaScript尝试取得原始值。<code>[]</code> 首先调用 <code>[].valueOf()</code>，还是得到<code>[]</code></li><li>由于上一步未取得原始值，继续调用 <code>[].toString()</code>，得到 <code>&quot;&quot;</code>。空字符串是原始值</li><li>继续调用 <code>+&quot;&quot;</code>。在表达式<code>+&#39;&#39;</code>中，<code>&#39;&#39;</code>是一个空字符串。当<code>+</code>运算符应用于一个空字符串时，它会将空字符串转换为数字。根据JavaScript的类型转换规则，一个空字符串在转换为数字时会被解释为0。因此，<code>+&#39;&#39;</code>的结果是数字类型的值0。</li><li><code>[+[]]</code> 的运算结果就是<code>[0]</code></li></ul><h2 id="计算-1"><a href="#计算-1" class="headerlink" title="计算 ++[]"></a>计算 <code>++[]</code></h2><p>这里提一下，<code>++</code>自增运算符只能应用于变量或对象的属性，而不能直接应用于字面量或表达式。</p><ul><li><code>++[]</code> 在自增之前首先要取得<code>[]</code>的原始值</li><li><code>[]</code>的原始值运算过程前面已经介绍过了，<code>[]</code>的原始值运算结果是空字符串<code>&quot;&quot;</code></li><li>继续计算 <code>+&quot;&quot;</code>，这个跟前面也是一样的。运算结果为数字类型的<code>0</code></li><li><code>++[]</code> 就是计算<code>++0</code>，0自增1后得到数字类型1。</li></ul><h2 id="计算-1-0"><a href="#计算-1-0" class="headerlink" title="计算 1 + [0]"></a>计算 <code>1 + [0]</code></h2><ul><li>这个表达是首先会尝试取得<code>[0]</code>的原始值</li><li>首先调用 <code>[0].valueOf()</code>,运算结果还是数组<code>[0]</code></li><li>继续调用 <code>[0].toString()</code>，得到 字符串类型<code>&quot;0&quot;</code></li><li>最后计算 <code>1 + &quot;0&quot;</code>得到字符串<code>&quot;10&quot;</code></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这道题考察了JavaScript语言的运算符优先级规则、类型转换规则、各种数据类型数据转换成原始值的方法（拆箱）。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_precedence#%E6%B1%87%E6%80%BB%E8%A1%A8">JavaScript运算符优先级</a></li><li>常见的类型转换规则：<ul><li><p>字符串转换：当一个值与字符串进行操作时（例如使用+运算符连接字符串），JavaScript会将该值转换为字符串类型。这种转换称为字符串转换。</p></li><li><p>数字转换：当一个值与数字进行操作时（例如使用+运算符进行加法运算），JavaScript会将该值转换为数字类型。这种转换称为数字转换。</p></li><li><p>布尔转换：在需要布尔值的上下文中，JavaScript会将值转换为布尔类型。以下值会被转换为false：false、null、undefined、0、NaN和空字符串 ‘’。其他所有值都会被转换为true。</p></li><li><p>对象转换：当一个非原始值（例如对象、数组）与字符串或数字进行操作时，JavaScript会尝试将其转换为相应的原始类型。这种转换称为对象转换。对象转换通常通过调用对象的toString()或valueOf()方法来完成。</p></li><li><p>显式类型转换：JavaScript提供了一些内置函数来进行显式的类型转换。例如，Number()函数可以将值转换为数字类型，String()函数可以将值转换为字符串类型，Boolean()函数可以将值转换为布尔类型。</p></li></ul></li></ul><p>需要注意的是，类型转换可能会导致意外的结果。在进行类型转换时，应该注意数据的原始类型，并确保转换结果符合预期</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive">toPrimitive</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">强制类型转换</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Three js 学习笔记 2</title>
    <link href="/2023/02/21/Threejs/%E7%AC%94%E8%AE%B02/"/>
    <url>/2023/02/21/Threejs/%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">THREE</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;three&#x27;</span>;<br><br><span class="hljs-keyword">const</span> &#123;<br>    <span class="hljs-variable constant_">REVISION</span>,<br>    <span class="hljs-title class_">Scene</span>,<br>    <span class="hljs-title class_">PerspectiveCamera</span>,<br>    <span class="hljs-title class_">WebGLRenderer</span>,<br>    <span class="hljs-title class_">BoxGeometry</span>,<br>    <span class="hljs-title class_">MeshBasicMaterial</span>,<br>    <span class="hljs-title class_">Mesh</span><br>&#125; = <span class="hljs-variable constant_">THREE</span><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getScene</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">    options = &#123;&#125;,</span><br><span class="hljs-params">    elements = []</span><br><span class="hljs-params">&#125;</span>) &#123;<br>    <span class="hljs-keyword">const</span> scene = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>();<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(options).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[key, val]</span>) =&gt;</span> &#123;<br>        scene[key] = val;<br>    &#125;)<br>    elements.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        scene.<span class="hljs-title function_">add</span>(item);<br>    &#125;)<br>    <span class="hljs-keyword">return</span> scene;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCamera</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> camera = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerspectiveCamera</span>(<span class="hljs-number">75</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">1000</span>);<br>    camera.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">5</span>;<br>    camera.<span class="hljs-title function_">lookAt</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> camera;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRender</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> renderer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebGLRenderer</span>();<br>    renderer.<span class="hljs-title function_">setSize</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>);<br>    <span class="hljs-keyword">return</span> renderer;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getBasicCube</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> geometry = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BoxGeometry</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> material = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MeshBasicMaterial</span>(&#123; <span class="hljs-attr">color</span>: <span class="hljs-number">0x00ff00</span> &#125;);<br>    <span class="hljs-keyword">const</span> cube = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mesh</span>(geometry, material);<br>    cube.<span class="hljs-property">position</span>.<span class="hljs-title function_">set</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> cube;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">params, callback</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; camera, render, scene &#125; = params;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (callback) &#123;<br>            <span class="hljs-title function_">callback</span>();<br>        &#125;<br>        <span class="hljs-title function_">requestAnimationFrame</span>(animate);<br>        render.<span class="hljs-title function_">render</span>(scene, camera);<br>    &#125;<br>    <span class="hljs-title function_">animate</span>();<br><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        camera.<span class="hljs-property">aspect</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;<br>        camera.<span class="hljs-title function_">updateProjectionMatrix</span>();<br>        render.<span class="hljs-title function_">setSize</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>);<br>    &#125;);<br>&#125;<br><br><br><span class="hljs-keyword">export</span> &#123;<br>    getScene,<br>    getRender,<br>    getCamera,<br>    getBasicCube,<br>    run<br>&#125;<br><br><span class="hljs-keyword">import</span> &#123;<br>    getScene,<br>    getRender,<br>    getCamera,<br>    getBasicCube,<br>    run<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/core/Factory&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">OrbitControls</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;three/examples/jsm/controls/OrbitControls&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">go</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> camera = <span class="hljs-title function_">getCamera</span>();<br>    <span class="hljs-keyword">const</span> render = <span class="hljs-title function_">getRender</span>();<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#box&quot;</span>).<span class="hljs-title function_">appendChild</span>(render.<span class="hljs-property">domElement</span>);<br><br>    <span class="hljs-keyword">const</span> cube = <span class="hljs-title function_">getBasicCube</span>();<br>    <span class="hljs-keyword">const</span> scene = <span class="hljs-title function_">getScene</span>(&#123;<br>        <span class="hljs-attr">elements</span>: [camera, cube]<br>    &#125;);<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">rotateCube</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">x</span> += <span class="hljs-number">0.005</span>;<br>        cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> += <span class="hljs-number">0.005</span>;<br>    &#125;<br><br>    <span class="hljs-title function_">run</span>(&#123; scene, render, camera &#125;, rotateCube)<br><br><br>    <span class="hljs-keyword">const</span> control = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrbitControls</span>(camera, render.<span class="hljs-property">domElement</span>);<br>    control.<span class="hljs-property">target</span>.<span class="hljs-title function_">set</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>&#125;<br><br><span class="hljs-keyword">import</span> &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; go &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/component/demo2&#x27;</span>;<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">IndexPage</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">go</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#box&quot;</span>)?.<span class="hljs-property">children</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-title function_">remove</span>());<br>    &#125;<br>  &#125;, [])<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>threejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Three js 学习笔记 1</title>
    <link href="/2023/02/21/Threejs/threejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2023/02/21/Threejs/threejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h1 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h1><p>Threejs 是入门Web 3D门槛比较低的一个库。Threejs是对WebGL的一个封装实现，使开发者不必具备图形学的基础就可以进行Web 3D应用的开发。但门槛低不代表没有门槛，Threejs中提供了很多封装好的工具类，开发者必须对这些概念依依学习理解之后，才能入门开发。<br>从Web前端开发者的角度来讲，WebGL 相较于 Threejs 的关系就像是原生JavaScript相较于JQuery。我们在能够熟练使用Threejs实现各种效果后再涉足比较底层WebGL，就能循序渐进得不断取得阶段性成就。这种相对平滑的学习曲线对我来说是比较友好的，毕竟成就感是坚持学习的最好原动力。</p><h2 id="hello-cube"><a href="#hello-cube" class="headerlink" title="hello cube"></a>hello cube</h2><p>如果你想快速地写出一个在网页上旋转的立方体，并感受web3d的开发魅力。你可以从githu上下载threejs源码，并在html中引用。快速粘贴threejs官网的实力代码，就能愉快的看见hello cube了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>threejs demo 1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;three.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable constant_">REVISION</span>,</span><br><span class="language-javascript">            <span class="hljs-title class_">Scene</span>,</span><br><span class="language-javascript">            <span class="hljs-title class_">PerspectiveCamera</span>,</span><br><span class="language-javascript">            <span class="hljs-title class_">WebGLRenderer</span>,</span><br><span class="language-javascript">            <span class="hljs-title class_">BoxGeometry</span>,</span><br><span class="language-javascript">            <span class="hljs-title class_">MeshBasicMaterial</span>,</span><br><span class="language-javascript">            <span class="hljs-title class_">Mesh</span></span><br><span class="language-javascript">        &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">THREE</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> scene = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> camera = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerspectiveCamera</span>(<span class="hljs-number">75</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> renderer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebGLRenderer</span>();</span><br><span class="language-javascript">        renderer.<span class="hljs-title function_">setSize</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>);</span><br><span class="language-javascript">        scene.<span class="hljs-title function_">add</span>(camera);</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(renderer.<span class="hljs-property">domElement</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> geometry = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BoxGeometry</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> material = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MeshBasicMaterial</span>(&#123; <span class="hljs-attr">color</span>: <span class="hljs-number">0x00ff00</span> &#125;);</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> cube = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mesh</span>(geometry, material);</span><br><span class="language-javascript">        scene.<span class="hljs-title function_">add</span>(cube);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        camera.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">5</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">x</span> += <span class="hljs-number">0.005</span>;</span><br><span class="language-javascript">            cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> += <span class="hljs-number">0.005</span>;</span><br><span class="language-javascript">            <span class="hljs-title function_">requestAnimationFrame</span>(animate);</span><br><span class="language-javascript">            renderer.<span class="hljs-title function_">render</span>(scene, camera);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">animate</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, onWindowResize);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">onWindowResize</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            camera.<span class="hljs-property">aspect</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;</span><br><span class="language-javascript">            camera.<span class="hljs-title function_">updateProjectionMatrix</span>();</span><br><span class="language-javascript">            renderer.<span class="hljs-title function_">setSize</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Threejs-项目"><a href="#Threejs-项目" class="headerlink" title="Threejs 项目"></a>Threejs 项目</h2><p>如果想要继续学习的话，建议使用基于前端模块化打包工具生成的项目模板开发。比如umi、parcel、vue-cli、create-react-app。这样做有以下几点好处</p><ul><li>这些工具只需要一行命令就能建立项目模板，开箱即用</li><li>方便地使用yarn、npm、pnpm、cnpm 进行模块安装，无需繁琐地寻找下载相关依赖库</li><li>框架支持热更新，一边写代码，页面能一边实时预览，所见即所得</li><li>打包工具可以编译整个项目，发布方便</li></ul><p>主要还是前3点，在学习过程中能够给我们极大的方便和助力，让我们专注库的学习。如果你不熟悉上面任何一款打包框架，建议花一点时间学习一下，只需了解如何使用即可。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>安装node，npm，这是打包依赖运行环境</li><li>安装框架命令行工具</li></ul><p>下面以umi为例简单演示相关步骤</p><ul><li><p>打开命令行（cmd&#x2F;iterm），按照<a href="https://v3.umijs.org/zh-CN/docs/getting-started">umi文档</a>新建项目</p></li><li><p>在src下新建component&#x2F;dmeo1&#x2F;index.js，并写入以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">THREE</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;three&#x27;</span>;<br><br><span class="hljs-keyword">const</span> &#123;<br>    <span class="hljs-variable constant_">REVISION</span>,<br>    <span class="hljs-title class_">Scene</span>,<br>    <span class="hljs-title class_">PerspectiveCamera</span>,<br>    <span class="hljs-title class_">WebGLRenderer</span>,<br>    <span class="hljs-title class_">BoxGeometry</span>,<br>    <span class="hljs-title class_">MeshBasicMaterial</span>,<br>    <span class="hljs-title class_">Mesh</span><br>&#125; = <span class="hljs-variable constant_">THREE</span><br><br><span class="hljs-keyword">const</span> scene = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>();<br><span class="hljs-keyword">const</span> camera = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerspectiveCamera</span>(<span class="hljs-number">75</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">1000</span>);<br><br><span class="hljs-keyword">const</span> renderer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebGLRenderer</span>();<br>renderer.<span class="hljs-title function_">setSize</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>);<br>scene.<span class="hljs-title function_">add</span>(camera);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#box&quot;</span>).<span class="hljs-title function_">appendChild</span>(renderer.<span class="hljs-property">domElement</span>);<br><br><span class="hljs-keyword">const</span> geometry = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BoxGeometry</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">const</span> material = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MeshBasicMaterial</span>(&#123; <span class="hljs-attr">color</span>: <span class="hljs-number">0x00ff00</span> &#125;);<br><span class="hljs-keyword">const</span> cube = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mesh</span>(geometry, material);<br>scene.<span class="hljs-title function_">add</span>(cube);<br><br>camera.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params"></span>) &#123;<br>    cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">x</span> += <span class="hljs-number">0.005</span>;<br>    cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> += <span class="hljs-number">0.005</span>;<br>    <span class="hljs-title function_">requestAnimationFrame</span>(animate);<br>    renderer.<span class="hljs-title function_">render</span>(scene, camera);<br>&#125;<br><span class="hljs-title function_">animate</span>();<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, onWindowResize);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">onWindowResize</span>(<span class="hljs-params"></span>) &#123;<br>    camera.<span class="hljs-property">aspect</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;<br>    camera.<span class="hljs-title function_">updateProjectionMatrix</span>();<br>    renderer.<span class="hljs-title function_">setSize</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>打开src&#x2F;page&#x2F;index.tsx 修改代码为下面的代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@/component/demo1&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">IndexPage</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>打开命令行，执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装threejs依赖库</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">npm i three -S</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动项目</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">npm start</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动浏览器预览应用</span><br>start http://localhost:8000/<br></code></pre></td></tr></table></figure></li><li><p>现在你应该在页面中看到一个旋转的正方体</p></li></ul><h2 id="道阻且长"><a href="#道阻且长" class="headerlink" title="道阻且长"></a>道阻且长</h2><p>能跑起来demo还是很有成就感的，后面就是学习Threejs的各种概念，须戒骄戒躁。不积跬步无以至千里，不积小流无以成江海。Threejs的概念相对不是很多，跟着官方示例一步一步来就行了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>threejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cookie 和 Session</title>
    <link href="/2022/10/12/CookieAndSession/"/>
    <url>/2022/10/12/CookieAndSession/</url>
    
    <content type="html"><![CDATA[<h1 id="背景：解决浏览器会话问题"><a href="#背景：解决浏览器会话问题" class="headerlink" title="背景：解决浏览器会话问题"></a>背景：解决浏览器会话问题</h1><p>HTTP协议是无状态协议，因此验证客户端身份就需要借助其他手段。cookie和session就是标志用户身份&#x2F;解决会话问题的其中一种技术。</p><p>当web应用需要标识用户身份时，服务端就会给客户端下发一个凭据(cookie)，在Session中凭据所对应的用户信息，凭据的有效性，过期时间是由服务端来决定的。</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>通常是由服务端产生通过HTTP响应头下发至客户端。在服务器的响应报文中设置cookie的响应头中会包含<code>Set-Cookie</code>头字段，如果要设置多个cookie，则相应头中会包含多个<code>Set-Cookie</code>头字段。</p><blockquote><p>Set-Cookie: BAIDUID&#x3D;033290741740BEC758F0F49EC40E4969:FG&#x3D;1; expires&#x3D;Thu, 31-Dec-37 23:55:55 GMT; max-age&#x3D;2147483647; path&#x3D;&#x2F;; domain&#x3D;.baidu.com</p></blockquote><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>可以理解为一个服务器端的数据库，记录了所有的客户端凭据列表</p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何学习</title>
    <link href="/2022/10/12/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/10/12/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h1><p>以前在学校的时候，也听老师天天叮嘱要保持天天学习的习惯。爷爷也会经常给我讲，毛主席3天不学习追不上刘少奇。在踏入社会之后，我就很少有人能够保持天天学习的状态了，即使有时候会回去刻意学习也是因为工作中遇到了问题，而被动地去寻找解决实际问题需要的知识。渐渐地，我发现那些年在学校里欠下的债还是要还的。</p><h2 id="1-摒弃随机森林式的学习方式"><a href="#1-摒弃随机森林式的学习方式" class="headerlink" title="1.摒弃随机森林式的学习方式"></a>1.摒弃随机森林式的学习方式</h2><p>我回想平常工作中遇到问题，然后去解决问题的过程，不难发现总是去看了许多文章，最终只有其中一篇或几篇文章对问题解决提供了帮助。然而这种帮助也仅仅是解决或者暂时绕过眼下的问题。随机森林指的是利用多棵树对样本进行训练并预测的一种分类器。在机器学习中，随机森林是一个包含多个决策树的分类器， 并且其输出的类别是由个别树输出的类别的众数而定。这种学习方式对我本身学习和提升自身知识水平的作用来说是非常有限而且是低效的。</p><h2 id="2-系统学习"><a href="#2-系统学习" class="headerlink" title="2.系统学习"></a>2.系统学习</h2><p>小f老师指出：回想高中，初中时的学习方式，我总是成学期地学习每一门学科，这种方式才是最有性价比，从长远来看也是效率比较高的。如果自己的职业需要某一学科的知识，建议去考证。比如你想职业专项机器学习方向，你就去考研究生。即使这个过程中，你把有些学到的知识忘记了，既然你已经读了研究生，那也差不到哪去。</p><h2 id="3-成本"><a href="#3-成本" class="headerlink" title="3.成本"></a>3.成本</h2><p>做事必先考虑其成本，于是我先去查了下北航计算机科学与技术硕士考试大纲。</p><table><thead><tr><th>考试科目单元</th><th>考试科目代码</th><th>考试科目名称</th></tr></thead><tbody><tr><td>第一门考试科目</td><td>101</td><td>思想政治理论</td></tr><tr><td>第二门考试科目</td><td>201</td><td>英语一</td></tr><tr><td>第三门考试科目</td><td>301</td><td>数学一</td></tr><tr><td>第四门考试科目</td><td>961</td><td>计算机基础综合</td></tr></tbody></table><p>除了基础的思想政治理论、英语一、数学一，对于计算机专业来说，还需要考计算机基础综合，我看了下<a href="http://scse.buaa.edu.cn/info/1299/5423.htm">计算机基础综合考试大纲</a>，里面的内存，操作系统进程，TCP协议、IP协议，CPU架构等很多知识都很系统，具有强关联性。市面上的面试题的考点跟这个大纲包含的知识点比简直是小儿科。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>与其在面试题海中苦苦鏖战花费巨额时间终不得其全貌，真的是不如系统地学习这些课程。至此，我终于明白了，这是怎样的性价比。这也是小f老师给我带来的认知提升</p>]]></content>
    
    
    
    <tags>
      
      <tag>方法论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>code-server</title>
    <link href="/2021/05/07/code-server/"/>
    <url>/2021/05/07/code-server/</url>
    
    <content type="html"><![CDATA[<h1 id="Visual-Studio-Code-Online"><a href="#Visual-Studio-Code-Online" class="headerlink" title="Visual Studio Code Online"></a>Visual Studio Code Online</h1><p>Visual Studio Code是微软推出的基于[Nodejs + Electron]的免费开源适配多端的代码编辑器。一个字牛B！让人爱不释手的原因有但不只有以下几点</p><ul><li>基于Nodejs - 前端开发者友好的</li><li>开源 - 可以定制</li><li>适配多端 - 客户端&#x2F;网页版</li></ul><p>本文介绍如何将 Visual Studio Code 部署在服务器上，并使用浏览器访问它。接着你就可以方便地 coding anywhere。</p><h1 id="code-server"><a href="#code-server" class="headerlink" title="code-server"></a>code-server</h1><p>由于<a href="https://github.com/microsoft/vscode">Visual Studio Code</a>编译部署<a href="https://github.com/microsoft/vscode/wiki/How-to-Contribute#build-and-run">web版本</a>具有一定的复杂性，而且在不同环境下编译部署有时候会出现层出不穷的问题。于是<a href="https://github.com/cdr/code-server">code-server</a>应运而生。</p><p>使用<code>code-server</code>可以更方便更容易部署Visual Studio Code浏览器版本。</p><h1 id="code-server-环境需求"><a href="#code-server-环境需求" class="headerlink" title="code-server 环境需求"></a>code-server 环境需求</h1><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>下面是官方给出的<a href="https://github.com/cdr/code-server#requirements">推荐服务器配置</a></p><blockquote><p>For a good experience, we recommend at least:<br><br>1 GB of RAM<br><br>2 cores</p></blockquote><p>笔者演示安装的服务环境为</p><ul><li><code>centos 7.6</code></li><li>1核心 2GB腾讯云轻应用服务器</li></ul><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>对于下面亮点，是我踩过坑的。如果不满足的话，会导致失败或者需要多次重试。</p><ul><li>服务器node版本高于node v12</li><li>能够流畅访问github静态资源</li></ul><h3 id="git-host"><a href="#git-host" class="headerlink" title="git host"></a>git host</h3><p>设置host优化下载速度</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 修改hosts文件</span><br>&gt; vim /etc/hosts<br><span class="hljs-comment"># 加入以下内容</span><br><br><span class="hljs-comment"># GitHub Start</span><br><span class="hljs-comment"># from https://github.com/ButterAndButterfly/GithubHost</span><br><span class="hljs-comment"># Last update at 2021-03-17 05:04:39 (Machine Local Time)</span><br>140.82.112.6 api.github.com<br>185.199.110.153 assets-cdn.github.com<br>185.199.110.133 avatars.githubusercontent.com<br>185.199.110.133 avatars0.githubusercontent.com<br>185.199.108.133 camo.githubusercontent.com<br>185.199.109.133 cloud.githubusercontent.com<br>140.82.113.9 codeload.github.com<br>185.199.108.133 favicons.githubusercontent.com<br>140.82.114.4 gist.github.com<br>185.199.108.133 gist.githubusercontent.com<br>140.82.114.4 github.com<br>185.199.108.154 github.githubassets.com<br>185.199.109.133 marketplace-screenshots.githubusercontent.com<br>140.82.114.3 octocaptcha.com<br>185.199.110.133 raw.githubusercontent.com<br>185.199.108.133 repository-images.githubusercontent.com<br>140.82.112.13 uploads.github.com<br>185.199.108.133 user-images.githubusercontent.com<br><span class="hljs-comment"># GitHub End</span><br><br></code></pre></td></tr></table></figure><h1 id="安装示例"><a href="#安装示例" class="headerlink" title="安装示例"></a>安装示例</h1><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载node-v14发行版linux amd版本二进制包</span><br>&gt; weget https://npm.taobao.org/mirrors/node/v14.16.0/node-v14.16.0-linux-x64.tar.xz<br><br><span class="hljs-comment"># 解压文件</span><br>&gt; xz -d node-v14.16.0-linux-x64.tar.xz<br>&gt; tar xvf node-v14.16.0-linux-x64.tar<br><br><span class="hljs-comment"># 移动至目标安装目录</span><br>&gt; <span class="hljs-built_in">mv</span> ./node-v14.16.0-linux-x64 /opt/node-v14.16.0<br><br><span class="hljs-comment"># 激活全局命令</span><br>&gt; <span class="hljs-built_in">export</span> NODE_HOME=/opt/node-v14.16.0<br>&gt; <span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$NODE_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment"># 验证安装</span><br>&gt; node -v<br>v14.16.0<br>&gt; npm -v<br>6.13.4<br></code></pre></td></tr></table></figure><h2 id="安装code-server"><a href="#安装code-server" class="headerlink" title="安装code-server"></a>安装code-server</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://github.com/cdr/code-server/releases">Releases版本列表</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 登录远程服务器</span><br><span class="hljs-comment"># 从github上下载程序程序包，请根据系统选择下载相应的版本</span><br>&gt; wget https://github.com/cdr/code-server/releases/download/v3.9.1/code-server-3.9.1-amd64.rpm<br></code></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装</span><br>&gt; sudo yum install ./code-server-3.9.1-amd64.rpm -y<br></code></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>yum 安装成功会在全局注册 <code>code-serve</code> 命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 验证程序能否启动</span><br>&gt; code-server<br>[2021-03-18T10:47:26.763Z] info  code-server 3.9.1 e0203f2a36c9b7036fefa50eec6cf8fa36c5c015<br>[2021-03-18T10:47:26.764Z] info  Using user-data-dir ~/.local/share/code-server<br>[2021-03-18T10:47:26.781Z] info  Using config file ~/.config/code-server/config.yaml<br>[2021-03-18T10:47:26.781Z] info  HTTP server listening on http://127.0.0.1:8080 <br>[2021-03-18T10:47:26.781Z] info    - Authentication is disabled <br>[2021-03-18T10:47:26.781Z] info    - Not serving HTTPS <br></code></pre></td></tr></table></figure><p>像上面这样的日志，便是code-server成功启动了。日志表示出code-server的工作情况</p><ul><li>默认工作目录： <code>~/.local/share/code-server</code></li><li>生成了默认配置文件：~&#x2F;.config&#x2F;code-server&#x2F;config.yaml</li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>这一步是可选的，code-server会默认启动在8080端口，并且设置开启【输入密码才能使用】。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># [可选]修改配置，使用vi编辑器修改配置</span><br>&gt; vi ~/.config/code-server/config.yaml<br><br><br><span class="hljs-comment"># 按a进入插入模式</span><br>bind-addr: 127.0.0.1:8080<br><span class="hljs-comment"># auth: password</span><br><span class="hljs-comment"># password: 036fefa50eec6cf8fa36c5c015</span><br>auth: none<br>cert: <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 编辑完成按ESC，输入:wq，推出编辑器</span><br><br><span class="hljs-comment"># 注册服务并启动服务</span><br><span class="hljs-comment"># @user为启动code-server的用户，为了避免权限滥用不建议使用 code-server@root</span><br>&gt; sudo systemctl <span class="hljs-built_in">enable</span> --now code-server@lighthouse<br><br><span class="hljs-comment"># 服务器设置完成</span><br>&gt; <span class="hljs-built_in">logout</span><br></code></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 返回本机，打开终端</span><br><br><span class="hljs-comment"># 本地ssh映射code-server服务</span><br><span class="hljs-comment"># eg：ssh -N -L (本机端口):(远程服务器端口) (linux用户名)@(服务器IP地址)</span><br><span class="hljs-comment"># eg：ssh -N -L 8082:127.0.0.1:8080 [user]@&lt;instance-ip&gt;</span><br><span class="hljs-comment"># -N disables executing a remote shell</span><br><br>&gt; ssh -N -L 8082:127.0.0.1:8080 lighthouse@3.135.61.1<br><br><span class="hljs-comment"># 输入密码后，打开本地浏览器访问 localhost:8080</span><br><br></code></pre></td></tr></table></figure><h2 id="配置服务和自启动"><a href="#配置服务和自启动" class="headerlink" title="配置服务和自启动"></a>配置服务和自启动</h2><p>使用<code>which</code>命令找到<code>code-server</code>命令在全局的位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; <span class="hljs-built_in">which</span> code-server<br></code></pre></td></tr></table></figure><p>创建service文件，附上<a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-the-code-server-cloud-ide-platform-on-ubuntu-18-04-quickstart">参考链接</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh">// 进入系统服务文件目录<br>&gt; <span class="hljs-built_in">cd</span> /usr/lib/systemd/system<br><br>// 创建service文件<br>&gt; sudo vim code-server.service<br><br>// 刷新系统服务列表<br>&gt; systemctl daemon-reload<br><br>// 查询service文件<br>&gt; systemctl list-unit-files | grep code<br><br>// 以服务方式启动code-server<br>&gt; sudo systemctl start code-server<br><br>// 查看服务状态<br>&gt; systemctl list-units | grep code<br><br>// 停止服务<br>&gt; sudo systemctl stop code-server<br><br>// 启用开机自启<br>&gt; sudo systemctl <span class="hljs-built_in">enable</span> code-server<br><br>// 禁用开机自启<br>&gt; sudo systemctl <span class="hljs-built_in">disable</span> code-server<br></code></pre></td></tr></table></figure><p>演示<code>service文件</code>内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=code-server<br><span class="hljs-attr">After</span>=nginx.service<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">User</span>=[code-server登录用户]<br><span class="hljs-attr">Group</span>=[code-server登录用户所在用户组]<br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">ExecStart</span>=/usr/bin/code-server --config [你的code-server配置文件路径]<br><span class="hljs-attr">Restart</span>=always<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://github.com/microsoft/vscode">Visual Studio Code</a></li><li><a href="https://github.com/cdr/code-server">code-server</a></li><li><a href="https://github.com/cdr/code-server/blob/main/docs/guide.md">code-server配置指南</a></li><li><a href="https://github.com/cdr/code-server/blob/main/docs/install.md#arch-linux">code-server安装指南</a></li><li><a href="https://github.com/cdr/code-server/releases">code-server 各版本安装文件</a></li><li><a href="https://github.com/ButterAndButterfly/GithubHost">github host 更新</a></li></ul><h2 id="其他应用"><a href="#其他应用" class="headerlink" title="其他应用"></a>其他应用</h2><p>Github 代码在线在vscode中打开<br>例如：<br><a href="https://github.com/Leslin/thinkphp5-restfulapi">https://github.com/Leslin/thinkphp5-restfulapi</a><br>改为：<br><a href="https://github1s.com/Leslin/thinkphp5-restfulapi">https://github1s.com/Leslin/thinkphp5-restfulapi</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2021/04/30/Docker/"/>
    <url>/2021/04/30/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-命令"><a href="#Docker-命令" class="headerlink" title="Docker 命令"></a>Docker 命令</h1><h2 id="Docker帮助命令"><a href="#Docker帮助命令" class="headerlink" title="Docker帮助命令"></a>Docker帮助命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看docker版本</span><br>&gt; docker version<br><br><span class="hljs-comment"># 显示全系统信息</span><br>&gt; docker info<br><br><span class="hljs-comment"># 显示 docker 的命令 及 功能说明</span><br>&gt; docker --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><h2 id="Docker-镜像命令"><a href="#Docker-镜像命令" class="headerlink" title="Docker 镜像命令"></a>Docker 镜像命令</h2><h3 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 列出本机上的dokcer镜像</span><br>&gt; docker images<br><br>REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE<br>franklin5/lanproxy-client    latest              824f595c81b3        2 years ago         550MB<br>siwatinc/ubuntu-playground   latest              0b38ddad1c4c        2 years ago         262MB<br><br><span class="hljs-comment"># REPOSITORY 镜像仓库名称</span><br><span class="hljs-comment"># SIZE 镜像大小</span><br><span class="hljs-comment"># TAG 镜像当前版本，不同的版本可以在机器上共存</span><br><span class="hljs-comment"># IMAGE ID 镜像ID</span><br><span class="hljs-comment"># CREATED镜像最后更新时间</span><br><br><span class="hljs-comment"># 拉取指定版本</span><br>&gt; docker pull tomcat:8.5<br></code></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><h4 id="a"><a href="#a" class="headerlink" title="-a"></a>-a</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下面两个命令输出一样， -a 是默认选项</span><br>&gt; docker images<br>&gt; docker images -a<br></code></pre></td></tr></table></figure><h4 id="q"><a href="#q" class="headerlink" title="-q"></a>-q</h4><p>显示镜像id，输出本机上所有的镜像id</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; docker images -q<br>824f595c81b3<br>0b38ddad1c4c<br></code></pre></td></tr></table></figure><h3 id="镜像搜索命令"><a href="#镜像搜索命令" class="headerlink" title="镜像搜索命令"></a>镜像搜索命令</h3><p>从镜像源网站搜索镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; docker search mysql<br></code></pre></td></tr></table></figure><h3 id="镜像拉取命令"><a href="#镜像拉取命令" class="headerlink" title="镜像拉取命令"></a>镜像拉取命令</h3><p>从镜像源网站搜索镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; docker pull mysql<br></code></pre></td></tr></table></figure><h3 id="镜像删除命令"><a href="#镜像删除命令" class="headerlink" title="镜像删除命令"></a>镜像删除命令</h3><p>从镜像源网站搜索镜像。被删除的镜像必须不被容器依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 几种删除方式</span><br>&gt; docker rmi 0b<br>&gt; docker rmi 0b38ddad1c4c<br>&gt; docker rmi franklin5/lanproxy-client<br><span class="hljs-comment"># 批量删除</span><br>&gt; docker rmi 0b 82<br>&gt; docker rmi 0b38ddad1c4c 824f595c81b3<br><br><span class="hljs-comment"># 全部删除镜像</span><br><span class="hljs-comment"># 有镜像id重复时(lastest与version相同)会不能删除</span><br>&gt; docker rmi $(docker images -q)<br><br>&gt; docker rmi -f $(docker images -q)<br></code></pre></td></tr></table></figure><h2 id="Docker-容器命令"><a href="#Docker-容器命令" class="headerlink" title="Docker 容器命令"></a>Docker 容器命令</h2><h3 id="启动容器命令"><a href="#启动容器命令" class="headerlink" title="启动容器命令"></a>启动容器命令</h3><p>启动容器后，容器必须存在一个前台进程。如果不是运行挂起的命令，容器会自动退出。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br></code></pre></td></tr></table></figure><h3 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h3><h4 id="–name"><a href="#–name" class="headerlink" title="–name"></a>–name</h4><p>指定容器名称</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; docer run --name lanproxy-client franklin5/lanproxy-client<br></code></pre></td></tr></table></figure><h4 id="d"><a href="#d" class="headerlink" title="-d"></a>-d</h4><p>后台运行容器，并返回容器ID，也启动守护式容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; docer run -d --name lanproxy-client franklin5/lanproxy-client<br></code></pre></td></tr></table></figure><h4 id="i-t"><a href="#i-t" class="headerlink" title="-i,-t"></a>-i,-t</h4><p><code>-i</code>以交互式模式运行容器，通产关于<code>-t</code>同时使用<br><code>-t</code>为荣期重新分配一个伪输入终端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动centos并进入/bin/bash目录</span><br><span class="hljs-comment"># 容器运行后，当前命令行会切换到容器交互终端</span><br>&gt; docker run -it centos /bin/bash<br></code></pre></td></tr></table></figure><h4 id="p"><a href="#p" class="headerlink" title="-p"></a>-p</h4><p>-p 宿主机端口:容器内部端口，可以理解为将<code>容器内部的端口</code>映射到<code>宿主机的端口</code>。这样就可以通过暴露的<code>宿主机端口</code>来访问docker容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># eg: 8080为宿主机端口，9999为容器内部端口</span><br><span class="hljs-comment"># 比如容器内 tomcat运行在 9999端口</span><br><span class="hljs-comment"># 这时就可以在宿主机通过http://localhost:8080访问 tomcat</span><br>&gt; docker run -it -p 8080:9999 centos /bin/bash<br></code></pre></td></tr></table></figure><h3 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h3><p>docker ps 默认列出当前正在运行的容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; docker ps [OPTIONS]<br><span class="hljs-comment"># 列出所有容器</span><br>&gt; docker ps -a<br><span class="hljs-comment"># 列出所有容器id</span><br>&gt; docker ps -aq<br></code></pre></td></tr></table></figure><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 退出并且关闭容器</span><br>&gt; <span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>Ctrl+P+Q 退出不关闭容器</p><h3 id="启动-重启容器"><a href="#启动-重启容器" class="headerlink" title="启动&#x2F;重启容器"></a>启动&#x2F;重启容器</h3><p>操作已经run过的容器，可以通过run时指定的名称或者run时生成的ID来操作指定容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; docker start 容器名称/ID<br>&gt; docker restart 容器名称/ID<br><span class="hljs-comment"># eg</span><br>&gt; docker start centos<br>&gt; docker start 0b38ddad1c4c<br></code></pre></td></tr></table></figure><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; docker stop 容器名称<br></code></pre></td></tr></table></figure><h3 id="删除-批量删除容器"><a href="#删除-批量删除容器" class="headerlink" title="删除&#x2F;批量删除容器"></a>删除&#x2F;批量删除容器</h3><p>如果需要删除正在运行的容器，需要使用-f参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; docker <span class="hljs-built_in">rm</span> 容器名称/ID<br>&gt; docker <span class="hljs-built_in">rm</span> -f 容器名称/ID<br><span class="hljs-comment"># 批量删除容器</span><br>&gt; docker <span class="hljs-built_in">rm</span> 0b38ddad1c4c 1g38ddad1c66<br><span class="hljs-comment"># 全部删除容器</span><br>&gt; docker <span class="hljs-built_in">rm</span> -f $(docker ps -aq)<br></code></pre></td></tr></table></figure><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><p>docker logs 容器ID&#x2F;容器名称</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 先运行一个容器</span><br>&gt; docker run -d --name centos01 centos /bin/sh -c <span class="hljs-string">&quot;while true;do echo hello ^-^;sleep 2;done&quot;</span><br><br>&gt; docker logs centos01<br><br><span class="hljs-comment"># -t 加入时间戳</span><br><span class="hljs-comment"># -f 跟随最新的日志打印。这个会阻塞命令行，按Ctrl+C退出</span><br>&gt; docker logs -tf centos01<br><br><span class="hljs-comment"># [--tail 数字n] 显示最后n条日志</span><br>&gt; docker logs -tf --<span class="hljs-built_in">tail</span> 10 centos01<br></code></pre></td></tr></table></figure><h3 id="查看容器内部正在运行的进程"><a href="#查看容器内部正在运行的进程" class="headerlink" title="查看容器内部正在运行的进程"></a>查看容器内部正在运行的进程</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; docker top 容器ID/容器名称<br></code></pre></td></tr></table></figure><h3 id="查看容器内部细节"><a href="#查看容器内部细节" class="headerlink" title="查看容器内部细节"></a>查看容器内部细节</h3><p>docker inspect 容器ID&#x2F;容器名称</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; docker inspect centos01<br>[<br>    &#123;<br>        <span class="hljs-string">&quot;Id&quot;</span>: <span class="hljs-string">&quot;4ecb98ae217b218c440a7f4d898df1bc57cd2973a8ee16b839c425916a560741&quot;</span>,<br>        <span class="hljs-string">&quot;Created&quot;</span>: <span class="hljs-string">&quot;2021-02-10T06:32:02.977247793Z&quot;</span>,<br>        <span class="hljs-string">&quot;Path&quot;</span>: <span class="hljs-string">&quot;/bin/sh&quot;</span>,<br>        <span class="hljs-string">&quot;Args&quot;</span>: [<br>            <span class="hljs-string">&quot;-c&quot;</span>,<br>            <span class="hljs-string">&quot;while true;do echo hello ^-^;sleep 2;done&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;State&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;Status&quot;</span>: <span class="hljs-string">&quot;running&quot;</span>,<br>            <span class="hljs-string">&quot;Running&quot;</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">&quot;Paused&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;Restarting&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;OOMKilled&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;Dead&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;Pid&quot;</span>: 24695,<br>            <span class="hljs-string">&quot;ExitCode&quot;</span>: 0,<br>            <span class="hljs-string">&quot;Error&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;StartedAt&quot;</span>: <span class="hljs-string">&quot;2021-02-10T06:32:03.485242521Z&quot;</span>,<br>            <span class="hljs-string">&quot;FinishedAt&quot;</span>: <span class="hljs-string">&quot;0001-01-01T00:00:00Z&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;Image&quot;</span>: <span class="hljs-string">&quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;</span>,<br>        <span class="hljs-string">&quot;ResolvConfPath&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/containers/4ecb98ae217b218c440a7f4d898df1bc57cd2973a8ee16b839c425916a560741/resolv.conf&quot;</span>,<br>        <span class="hljs-string">&quot;HostnamePath&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/containers/4ecb98ae217b218c440a7f4d898df1bc57cd2973a8ee16b839c425916a560741/hostname&quot;</span>,<br>        <span class="hljs-string">&quot;HostsPath&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/containers/4ecb98ae217b218c440a7f4d898df1bc57cd2973a8ee16b839c425916a560741/hosts&quot;</span>,<br>        <span class="hljs-string">&quot;LogPath&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/containers/4ecb98ae217b218c440a7f4d898df1bc57cd2973a8ee16b839c425916a560741/4ecb98ae217b218c440a7f4d898df1bc57cd2973a8ee16b839c425916a560741-json.log&quot;</span>,<br>        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;/centos01&quot;</span>,<br>        <span class="hljs-string">&quot;RestartCount&quot;</span>: 0,<br>        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;btrfs&quot;</span>,<br>        <span class="hljs-string">&quot;Platform&quot;</span>: <span class="hljs-string">&quot;linux&quot;</span>,<br>        <span class="hljs-string">&quot;MountLabel&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;ProcessLabel&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;AppArmorProfile&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;ExecIDs&quot;</span>: null,<br>        <span class="hljs-string">&quot;HostConfig&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;Binds&quot;</span>: null,<br>            <span class="hljs-string">&quot;ContainerIDFile&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;LogConfig&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>                <span class="hljs-string">&quot;Config&quot;</span>: &#123;&#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;NetworkMode&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,<br>            <span class="hljs-string">&quot;PortBindings&quot;</span>: &#123;&#125;,<br>            <span class="hljs-string">&quot;RestartPolicy&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;no&quot;</span>,<br>                <span class="hljs-string">&quot;MaximumRetryCount&quot;</span>: 0<br>            &#125;,<br>            <span class="hljs-string">&quot;AutoRemove&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;VolumeDriver&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;VolumesFrom&quot;</span>: null,<br>            <span class="hljs-string">&quot;CapAdd&quot;</span>: null,<br>            <span class="hljs-string">&quot;CapDrop&quot;</span>: null,<br>            <span class="hljs-string">&quot;Capabilities&quot;</span>: null,<br>            <span class="hljs-string">&quot;Dns&quot;</span>: [],<br>            <span class="hljs-string">&quot;DnsOptions&quot;</span>: [],<br>            <span class="hljs-string">&quot;DnsSearch&quot;</span>: [],<br>            <span class="hljs-string">&quot;ExtraHosts&quot;</span>: null,<br>            <span class="hljs-string">&quot;GroupAdd&quot;</span>: null,<br>            <span class="hljs-string">&quot;IpcMode&quot;</span>: <span class="hljs-string">&quot;private&quot;</span>,<br>            <span class="hljs-string">&quot;Cgroup&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;Links&quot;</span>: null,<br>            <span class="hljs-string">&quot;OomScoreAdj&quot;</span>: 0,<br>            <span class="hljs-string">&quot;PidMode&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;Privileged&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;PublishAllPorts&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;ReadonlyRootfs&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;SecurityOpt&quot;</span>: null,<br>            <span class="hljs-string">&quot;UTSMode&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;UsernsMode&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;ShmSize&quot;</span>: 67108864,<br>            <span class="hljs-string">&quot;Runtime&quot;</span>: <span class="hljs-string">&quot;runc&quot;</span>,<br>            <span class="hljs-string">&quot;ConsoleSize&quot;</span>: [<br>                0,<br>                0<br>            ],<br>            <span class="hljs-string">&quot;Isolation&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;CpuShares&quot;</span>: 0,<br>            <span class="hljs-string">&quot;Memory&quot;</span>: 0,<br>            <span class="hljs-string">&quot;NanoCpus&quot;</span>: 0,<br>            <span class="hljs-string">&quot;CgroupParent&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;BlkioWeight&quot;</span>: 0,<br>            <span class="hljs-string">&quot;BlkioWeightDevice&quot;</span>: [],<br>            <span class="hljs-string">&quot;BlkioDeviceReadBps&quot;</span>: null,<br>            <span class="hljs-string">&quot;BlkioDeviceWriteBps&quot;</span>: null,<br>            <span class="hljs-string">&quot;BlkioDeviceReadIOps&quot;</span>: null,<br>            <span class="hljs-string">&quot;BlkioDeviceWriteIOps&quot;</span>: null,<br>            <span class="hljs-string">&quot;CpuPeriod&quot;</span>: 0,<br>            <span class="hljs-string">&quot;CpuQuota&quot;</span>: 0,<br>            <span class="hljs-string">&quot;CpuRealtimePeriod&quot;</span>: 0,<br>            <span class="hljs-string">&quot;CpuRealtimeRuntime&quot;</span>: 0,<br>            <span class="hljs-string">&quot;CpusetCpus&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;CpusetMems&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;Devices&quot;</span>: [],<br>            <span class="hljs-string">&quot;DeviceCgroupRules&quot;</span>: null,<br>            <span class="hljs-string">&quot;DeviceRequests&quot;</span>: null,<br>            <span class="hljs-string">&quot;KernelMemory&quot;</span>: 0,<br>            <span class="hljs-string">&quot;KernelMemoryTCP&quot;</span>: 0,<br>            <span class="hljs-string">&quot;MemoryReservation&quot;</span>: 0,<br>            <span class="hljs-string">&quot;MemorySwap&quot;</span>: 0,<br>            <span class="hljs-string">&quot;MemorySwappiness&quot;</span>: null,<br>            <span class="hljs-string">&quot;OomKillDisable&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;PidsLimit&quot;</span>: null,<br>            <span class="hljs-string">&quot;Ulimits&quot;</span>: null,<br>            <span class="hljs-string">&quot;CpuCount&quot;</span>: 0,<br>            <span class="hljs-string">&quot;CpuPercent&quot;</span>: 0,<br>            <span class="hljs-string">&quot;IOMaximumIOps&quot;</span>: 0,<br>            <span class="hljs-string">&quot;IOMaximumBandwidth&quot;</span>: 0,<br>            <span class="hljs-string">&quot;MaskedPaths&quot;</span>: [<br>                <span class="hljs-string">&quot;/proc/asound&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/acpi&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/kcore&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/keys&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/latency_stats&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/timer_list&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/timer_stats&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/sched_debug&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/scsi&quot;</span>,<br>                <span class="hljs-string">&quot;/sys/firmware&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;ReadonlyPaths&quot;</span>: [<br>                <span class="hljs-string">&quot;/proc/bus&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/fs&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/irq&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/sys&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/sysrq-trigger&quot;</span><br>            ]<br>        &#125;,<br>        <span class="hljs-string">&quot;GraphDriver&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;Data&quot;</span>: null,<br>            <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;btrfs&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;Mounts&quot;</span>: [],<br>        <span class="hljs-string">&quot;Config&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;Hostname&quot;</span>: <span class="hljs-string">&quot;4ecb98ae217b&quot;</span>,<br>            <span class="hljs-string">&quot;Domainname&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;User&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;AttachStdin&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;AttachStdout&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;AttachStderr&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;Tty&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;OpenStdin&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;StdinOnce&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;Env&quot;</span>: [<br>                <span class="hljs-string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;Cmd&quot;</span>: [<br>                <span class="hljs-string">&quot;/bin/sh&quot;</span>,<br>                <span class="hljs-string">&quot;-c&quot;</span>,<br>                <span class="hljs-string">&quot;while true;do echo hello ^-^;sleep 2;done&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;Image&quot;</span>: <span class="hljs-string">&quot;centos&quot;</span>,<br>            <span class="hljs-string">&quot;Volumes&quot;</span>: null,<br>            <span class="hljs-string">&quot;WorkingDir&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;Entrypoint&quot;</span>: null,<br>            <span class="hljs-string">&quot;OnBuild&quot;</span>: null,<br>            <span class="hljs-string">&quot;Labels&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;org.label-schema.build-date&quot;</span>: <span class="hljs-string">&quot;20201204&quot;</span>,<br>                <span class="hljs-string">&quot;org.label-schema.license&quot;</span>: <span class="hljs-string">&quot;GPLv2&quot;</span>,<br>                <span class="hljs-string">&quot;org.label-schema.name&quot;</span>: <span class="hljs-string">&quot;CentOS Base Image&quot;</span>,<br>                <span class="hljs-string">&quot;org.label-schema.schema-version&quot;</span>: <span class="hljs-string">&quot;1.0&quot;</span>,<br>                <span class="hljs-string">&quot;org.label-schema.vendor&quot;</span>: <span class="hljs-string">&quot;CentOS&quot;</span><br>            &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;NetworkSettings&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;Bridge&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;SandboxID&quot;</span>: <span class="hljs-string">&quot;14afbacd87e4fe863e5a0c1f178c8eb17bb5857ecba055f071675f430a9368c5&quot;</span>,<br>            <span class="hljs-string">&quot;HairpinMode&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;LinkLocalIPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;LinkLocalIPv6PrefixLen&quot;</span>: 0,<br>            <span class="hljs-string">&quot;Ports&quot;</span>: &#123;&#125;,<br>            <span class="hljs-string">&quot;SandboxKey&quot;</span>: <span class="hljs-string">&quot;/var/run/docker/netns/14afbacd87e4&quot;</span>,<br>            <span class="hljs-string">&quot;SecondaryIPAddresses&quot;</span>: null,<br>            <span class="hljs-string">&quot;SecondaryIPv6Addresses&quot;</span>: null,<br>            <span class="hljs-string">&quot;EndpointID&quot;</span>: <span class="hljs-string">&quot;4da2387a054e45620df86815a81709c18b8c92a685f872734c456e86552b3496&quot;</span>,<br>            <span class="hljs-string">&quot;Gateway&quot;</span>: <span class="hljs-string">&quot;172.17.0.1&quot;</span>,<br>            <span class="hljs-string">&quot;GlobalIPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,<br>            <span class="hljs-string">&quot;IPAddress&quot;</span>: <span class="hljs-string">&quot;172.17.0.2&quot;</span>,<br>            <span class="hljs-string">&quot;IPPrefixLen&quot;</span>: 16,<br>            <span class="hljs-string">&quot;IPv6Gateway&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;MacAddress&quot;</span>: <span class="hljs-string">&quot;02:42:ac:11:00:02&quot;</span>,<br>            <span class="hljs-string">&quot;Networks&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;bridge&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;IPAMConfig&quot;</span>: null,<br>                    <span class="hljs-string">&quot;Links&quot;</span>: null,<br>                    <span class="hljs-string">&quot;Aliases&quot;</span>: null,<br>                    <span class="hljs-string">&quot;NetworkID&quot;</span>: <span class="hljs-string">&quot;f5a30ff69277bc0f0a730fc604a4bbe5c7072a5269d0595208bf25973e9d3dbd&quot;</span>,<br>                    <span class="hljs-string">&quot;EndpointID&quot;</span>: <span class="hljs-string">&quot;4da2387a054e45620df86815a81709c18b8c92a685f872734c456e86552b3496&quot;</span>,<br>                    <span class="hljs-string">&quot;Gateway&quot;</span>: <span class="hljs-string">&quot;172.17.0.1&quot;</span>,<br>                    <span class="hljs-string">&quot;IPAddress&quot;</span>: <span class="hljs-string">&quot;172.17.0.2&quot;</span>,<br>                    <span class="hljs-string">&quot;IPPrefixLen&quot;</span>: 16,<br>                    <span class="hljs-string">&quot;IPv6Gateway&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                    <span class="hljs-string">&quot;GlobalIPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                    <span class="hljs-string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,<br>                    <span class="hljs-string">&quot;MacAddress&quot;</span>: <span class="hljs-string">&quot;02:42:ac:11:00:02&quot;</span>,<br>                    <span class="hljs-string">&quot;DriverOpts&quot;</span>: null<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><h3 id="以交互式命令行进入正在运行的容器"><a href="#以交互式命令行进入正在运行的容器" class="headerlink" title="以交互式命令行进入正在运行的容器"></a>以交互式命令行进入正在运行的容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 方式1</span><br><span class="hljs-comment"># 重新分配终端</span><br>&gt; docker <span class="hljs-built_in">exec</span> -it 容器名称/容器ID /bin/bash<br><br><span class="hljs-comment"># 方式2</span><br><span class="hljs-comment"># 附加到正在运行的终端。如果当前的终端是最后一个前台今晨，exit后，会退出容器。</span><br>&gt; docker attach 容器名称/容器ID<br></code></pre></td></tr></table></figure><h3 id="复制容器文件到宿主机器"><a href="#复制容器文件到宿主机器" class="headerlink" title="复制容器文件到宿主机器"></a>复制容器文件到宿主机器</h3><p>docker cp [-r] 容器名称&#x2F;容器ID:容器内文件路径 目标宿主机路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 找到文件</span><br>&gt; docker <span class="hljs-built_in">exec</span> -it centos /bin/bash<br><br><span class="hljs-comment"># 复制文件</span><br><span class="hljs-comment"># 把容器centos01中的/var/log/anaconda/anaconda.log文件复制到宿主机/root/logs目录下</span><br>docker <span class="hljs-built_in">cp</span> -r centos01:/var/log/anaconda/anaconda.log /root/logs<br></code></pre></td></tr></table></figure><h2 id="Docker镜像操作"><a href="#Docker镜像操作" class="headerlink" title="Docker镜像操作"></a>Docker镜像操作</h2><ul><li>拉取一个base镜像<br><code>&gt; docker pull tomcat:8.5</code></li><li>运行容器<br><code>&gt; docker run -d --name tomcat01 -p 8001:8080 tomcat</code></li><li>修改容器内容</li><li>提交修改，生成新的镜像<br>  格式： docker commit -m&#x3D;’镜像描述’ -a&#x3D;’作者名字’ 容器ID&#x2F;容器名称 新镜像名称:[tag]<br><code>&gt; doc</code></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2021/04/30/HTTP/"/>
    <url>/2021/04/30/HTTP/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="HTTP请求模型"><a href="#HTTP请求模型" class="headerlink" title="HTTP请求模型"></a>HTTP请求模型</h2><p>HTTP请求的参与者是客户端和服务端。对于Web前端开发者来说，浏览器为客户端，服务器是服务端。服务器在运行期间提供服务，总是由客户端发起请求，服务端接收到HTTP请求之后再做HTTP响应处理。</p><p>概念</p><ul><li>客户端：发出请求的一方</li><li>服务端：发出响应的一方</li></ul><h2 id="用户输入网址后发生了什么（网络层）"><a href="#用户输入网址后发生了什么（网络层）" class="headerlink" title="用户输入网址后发生了什么（网络层）"></a>用户输入网址后发生了什么（网络层）</h2><p>当用户在浏览器地址栏输入网址，并回车时，这背后究竟发生了什么。</p><h3 id="浏览器获取服务器IP（域名解析）"><a href="#浏览器获取服务器IP（域名解析）" class="headerlink" title="浏览器获取服务器IP（域名解析）"></a>浏览器获取服务器IP（域名解析）</h3><p>实际上浏览器并不能直接根据网址来找到网络上相应的资源，而是要根据网址获得对应的服务器IP，这个过程叫域名解析。域名解析的流程如下：</p><ul><li>网络请求首先经过局域网网关</li><li>请求通过有限个路由到达DNS服务器</li><li>DNS服务器从记录表中找到域名对应的IP，并响应给客户端</li></ul><h3 id="浏览器发送HTTP请求"><a href="#浏览器发送HTTP请求" class="headerlink" title="浏览器发送HTTP请求"></a>浏览器发送HTTP请求</h3><p>在网络上HTTP在路由间跳跃，顺利的话，最终到达目标IP对应的服务器&#x2F;服务器网关</p><h3 id="服务器处理请求"><a href="#服务器处理请求" class="headerlink" title="服务器处理请求"></a>服务器处理请求</h3><p>网络请求首先会进入目标IP网关，往往服务端为了提高服务可用性，会使用服务器集群来提供稳定服务。网络请求进入网关后会被送至反向代理服务器，由反向代理服务器，把请求转发至提供服务的一台服务器上，由这台服务器最终来处理HTTP请求。HTTP响应会通过目标IP网关，前往客户端。</p><h3 id="浏览器接收到响应内容"><a href="#浏览器接收到响应内容" class="headerlink" title="浏览器接收到响应内容"></a>浏览器接收到响应内容</h3><p>浏览器会对HTTP响应的HTML处理，渲染或者继续其他请求。</p><h2 id="HTTP协议-1"><a href="#HTTP协议-1" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>超文本传输协议（Hypertext Transfer Protocol，HTTP）</p><p>是一个简单的请求-响应协议，它通常运行在TCP之上。</p><p>是由从客户机到服务器的请求（Request）和从服务器到客户机的响应（Response）进行约束和规范。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。</p><p>请求和响应消息的头以ASCII形式给出；而消息内容则具有一个类似MIME的格式。这个简单模型是早期Web成功的有功之臣，因为它使开发和部署非常地直截了当。</p><h3 id="短连接"><a href="#短连接" class="headerlink" title="短连接"></a>短连接</h3><p>浏览器接收到来自服务端的相应后就立即断开链接</p><h3 id="长链接"><a href="#长链接" class="headerlink" title="长链接"></a>长链接</h3><p>长链接的请求头会包含<code>Keep-Alive</code>字段，允许消息发送者暗示连接的状态。这个字段可以取<code>timeout = 20</code>以秒为单位，和<code>max = 1000</code>此连接可以发送的请求的最大值。这表示该连接不会立即断开，从而提高连接利用效率。</p><p>含有 Keep-Alive 首部的响应示例:</p><blockquote><p>HTTP&#x2F;1.1 200 OK<br>Connection: Keep-Alive<br>Content-Encoding: gzip<br>Content-Type: text&#x2F;html; charset&#x3D;utf-8<br>Date: Thu, 11 Aug 2016 15:23:13 GMT<br>Keep-Alive: timeout&#x3D;5, max&#x3D;1000<br>Last-Modified: Mon, 25 Jul 2016 04:32:39 GMT<br>Server: Apache</p></blockquote><h3 id="HTTP协议版本"><a href="#HTTP协议版本" class="headerlink" title="HTTP协议版本"></a>HTTP协议版本</h3><ul><li>1991 HTTP&#x2F;0.9</li><li>1996 HTTP&#x2F;1.0 短连接</li><li>1999 HTTP&#x2F;1.1 长链接&#x2F;美国经济互联网泡沫</li><li>2015 HTTP&#x2F;2   用二进制封装了请求头 </li><li>20xx HTTP&#x2F;3   QUIC+UDP&#x2F;目前还未形成标准</li></ul><h3 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h3><p>HTTP报文由从客户机到服务器的请求和从服务器到客户机的响应构成。<br><img src="http://s5.51cto.com/wyfs02/M02/88/75/wKioL1f40gLxci2NAAFbDoLCApM897.png" alt="HTTP请求/响应报文对比"></p><h4 id="请求报文格式"><a href="#请求报文格式" class="headerlink" title="请求报文格式"></a>请求报文格式</h4><p>请求行 － 通用信息头&#x2F;请求头&#x2F;实体头 － 报文主体</p><ul><li>请求行：<code>请求方法</code> <code>SP</code> <code>URL</code> <code>SP</code> <code>HTTP协议版本</code> <code>CRLF</code></li><li>请求头：[头字段名:值CRLF][头字段名:值CRLF]…CRLF</li><li>请求体：文本信息</li></ul><p>请求行以方法字段开始，后面分别是 URL 字段和 HTTP 协议版本字段，并以 CRLF 结尾。SP 是分隔符。除了在最后的 CRLF 序列中 CR 和 LF 是必需的之外，其他都可以不要。</p><blockquote><p>SP 空格Space</p></blockquote><blockquote><p>CRLF是Carriage-Return Line-Feed的缩写，意思是回车换行，就是回车(CR, ASCII 13, \r) 换行(LF, ASCII 10, \n)。换行在有的ASCII码表也用newline（简nl）来进行表示,这里的lf是line feed的概念，意思是一样的。</p></blockquote><table><thead><tr><th>Dec(十进制)</th><th>Hex (十六进制)</th><th>缩写&#x2F;字符</th><th>解释</th></tr></thead><tbody><tr><td>10</td><td>0x0A</td><td>LF (NL line feed, new line)</td><td>换行键\n</td></tr><tr><td>13</td><td>0x0D</td><td>CR (carriage return)</td><td>回车键\r</td></tr><tr><td>32</td><td>0x20</td><td>(space)</td><td>空格\s</td></tr></tbody></table><h4 id="应答报文格式"><a href="#应答报文格式" class="headerlink" title="应答报文格式"></a>应答报文格式</h4><p>状态行 － 通用信息头&#x2F;响应头&#x2F;实体头 － 报文主体</p><ul><li>状态行：<code>HTTP协议版本</code> <code>状态码</code> <code>状态描述</code> <code>CRLF</code></li><li>响应头</li><li>响应体</li></ul><p>状态码元由3位数字组成，表示请求是否被理解或被满足。原因分析是对原文的状态码作简短的描述，状态码用来支持自动操作，而原因分析用来供用户使用。客户机无需用来检查或显示语法。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; curl -I baidu.com<br>HTTP/1.1 200 OK<br>Date: Sat, 08 May 2021 07:00:39 GMT<br>Server: Apache<br>Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT<br>ETag: <span class="hljs-string">&quot;51-47cf7e6ee8400&quot;</span><br>Accept-Ranges: bytes<br>Content-Length: 81<br>Cache-Control: max-age=86400<br>Expires: Sun, 09 May 2021 07:00:39 GMT<br>Connection: Keep-Alive<br>Content-Type: text/html<br></code></pre></td></tr></table></figure><h3 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h3><p>GET&#x2F;POST&#x2F;PUT&#x2F;DELETE 属于数据类，操作数据CRUD<br>HEAD&#x2F;TRACE&#x2F;CONNECT&#x2F;OPTIONS 属于指令类</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>请求指定的页面信息，并返回实体主体。</td></tr><tr><td>2</td><td>HEAD</td><td>类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>3</td><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。</td></tr><tr><td>4</td><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td>5</td><td>DELETE</td><td>请求服务器删除指定的页面。</td></tr><tr><td>6</td><td>CONNECT</td><td>HTTP&#x2F;1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td>7</td><td>OPTIONS</td><td>允许客户端查看服务器的性能。</td></tr><tr><td>8</td><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断。</td></tr><tr><td>9</td><td>PATCH</td><td>是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h3 id="HTTP请求头-响应头"><a href="#HTTP请求头-响应头" class="headerlink" title="HTTP请求头&#x2F;响应头"></a>HTTP请求头&#x2F;响应头</h3><h4 id="通用头字段"><a href="#通用头字段" class="headerlink" title="通用头字段"></a>通用头字段</h4><ul><li><p>Connection Connection 头（header） 决定当前的事务完成后，是否会关闭网络连接。如果该值是“keep-alive”，<code>网络连接就是持久的</code>，不会关闭，使得对同一个服务器的请求可以继续在该连接上完成。</p><blockquote><p>Connection: keep-alive。表明客户端想要保持该网络连接打开，HTTP&#x2F;1.1的请求默认使用一个持久连接<br>Connection: close。表明客户端或服务器想要关闭该网络连接，这是HTTP&#x2F;1.0请求的默认值</p></blockquote></li><li><p>Date ：是一个通用首部，其中包含了<code>报文创建的日期和时间</code>。</p><blockquote><p>Date: Wed, 21 Oct 2015 07:28:00 GMT</p></blockquote></li><li><p>Transfer-Encoding：消息首部指明了将 entity 安全传递给用户所采用的<code>编码形式</code>。当这个消息首部出现在 HEAD 请求的响应中，而这样的响应没有消息体，那么它其实指的是应用在相应的  GET 请求的应答的值。</p><blockquote><p>Transfer-Encoding: chunked<br>Transfer-Encoding: compress<br>Transfer-Encoding: deflate<br>Transfer-Encoding: gzip<br>Transfer-Encoding: identity<br>&#x2F;&#x2F; Several values can be listed, separated by a comma<br>Transfer-Encoding: gzip, chunked</p></blockquote></li><li><p>Cache-Control 通用消息头字段，被用于在http请求和响应中，通过指定指令来实现缓存机制。</p></li></ul><h4 id="其他常用头"><a href="#其他常用头" class="headerlink" title="其他常用头"></a>其他常用头</h4><ul><li>Server Server 首部包含了处理请求的源头服务器所用到的软件相关信息。</li><li>Last-Modified 是一个响应首部，其中包含源头服务器认定的资源做出修改的日期及时间。</li><li>ETag HTTP响应头是资源的特定版本的标识符。</li><li>Accept-Ranges 服务器使用 HTTP 响应头 Accept-Ranges 标识自身支持范围请求(partial requests)<blockquote><p>Accept-Ranges: bytes<br>Accept-Ranges: none</p></blockquote></li><li>Content-Length 是一个实体消息首部，用来指明发送给接收方的消息主体的大小，即用十进制数字表示的八位元组的数目。</li><li>Expires 响应头包含日期&#x2F;时间， 即在此时候之后，响应过期。</li><li>Content-Type 实体头部用于指示资源的MIME类型 media type 。<blockquote><p>Content-Type: text&#x2F;html; charset&#x3D;utf-8<br>Content-Type: multipart&#x2F;form-data; boundary&#x3D;something</p></blockquote></li></ul><h1 id="TCP-IP协议栈"><a href="#TCP-IP协议栈" class="headerlink" title="TCP&#x2F;IP协议栈"></a>TCP&#x2F;IP协议栈</h1><p>TCP&#x2F;IP（Transmission Control Protocol&#x2F;Internet Protocol，传输控制协议&#x2F;网际协议）是指能够在多个不同网络间实现信息传输的协议簇。<br>是一个协议集合。</p><p>历史上这些协议是美国军方使用的技术，后来用于民用并且不断发展，并被ISO标准化。<br>ISO:国际标准化组织<br>OSI:开放式系统互联</p><table><thead><tr><th>IOS&#x2F;OSI标准</th><th>实际实现</th></tr></thead><tbody><tr><td>应用层<br>表示层<br>会话层</td><td>应用层</td></tr><tr><td>传输层</td><td>传输层</td></tr><tr><td>网络层</td><td>网络层</td></tr><tr><td>数据链路层</td><td>物理层</td></tr><tr><td>数据链路层</td><td>网络接口层</td></tr></tbody></table><h2 id="各层分工"><a href="#各层分工" class="headerlink" title="各层分工"></a>各层分工</h2><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>HTTP协议、FTP、DNS、SMTP等</p><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>TCP协议：可靠的传输<br>UDP协议：无连接的传输协议。虽然UDP是一个不可靠的协议，但它是分发信息的一个理想协议。用于上传&#x2F;和下载等场景</p><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>IP协议：是网际互联层最终要的协议，主要解决主机到主机的通信问题</p><h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><p>MAC地址</p><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>电缆，网线等网络介质</p><h2 id="协议封装-解析过程"><a href="#协议封装-解析过程" class="headerlink" title="协议封装&#x2F;解析过程"></a>协议封装&#x2F;解析过程</h2><p>封装：应用层数据被包装成传输层数据，接着被网络层包装，到达物理层被转换成电&#x2F;光信号传输<br>解析：光&#x2F;电信号被转换成网络层数据，到达传输层被剥离成传输层数据，到达应用层继续被剥离称应用层数据，到达应用程序解析得到实际数据。</p><h1 id="HTTP的工作过程"><a href="#HTTP的工作过程" class="headerlink" title="HTTP的工作过程"></a>HTTP的工作过程</h1><p>一次HTTP操作被称为一个事物，操作中的某一步出现错误，那么错误信息将返回到客户端。事物步骤如下</p><ul><li>客户机与服务器建立连接（底层TCP连接建立），HTTP工作开始</li><li>建立连接后发送请求报文</li><li>服务器接收到请求报文，给予响应报文</li><li>客户端接收到响应报文，断开链接。进行显示</li></ul><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h2><p>追踪网络路由设备的命令行工具，示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; traceroute www.baidu.com<br>traceroute: Warning: www.baidu.com has multiple addresses; using 180.101.49.12<br>traceroute to www.a.shifen.com (180.101.49.12), 64 hops max, 52 byte packets<br> 1  30.73.26.254 (30.73.26.254)  2.867 ms  2.219 ms  1.861 ms<br> 2  30.73.2.73 (30.73.2.73)  0.669 ms  0.657 ms  0.353 ms<br> 3  30.73.1.69 (30.73.1.69)  5.739 ms  2.262 ms  2.009 ms<br> 4  30.73.1.134 (30.73.1.134)  0.795 ms  0.725 ms  0.757 ms<br> 5  30.73.1.5 (30.73.1.5)  5.567 ms  2.629 ms  2.556 ms<br> 6  45.112.221.193 (45.112.221.193)  9.447 ms  9.271 ms<br> ...<br></code></pre></td></tr></table></figure><p>上面的命令行输出中，每一个路由设备都会产生一行记录。程序利用增加存活时间（TTL&#x2F;跳转计数&#x2F;跳）值来实现其功能。每当数据包经过一个路由器，其存活时间就会减1。当其存活时间是0时，主机便取消数据包，并传送一个ICMP TTL数据包给原数据包的发出者。</p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>网络诊断工具，检测主机之间通信是否正常。示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; ping baidu.com<br>PING baidu.com (39.156.69.79): 56 data bytes<br>64 bytes from 39.156.69.79: icmp_seq=0 ttl=48 time=27.729 ms<br>64 bytes from 39.156.69.79: icmp_seq=1 ttl=48 time=27.372 ms<br>64 bytes from 39.156.69.79: icmp_seq=2 ttl=48 time=27.403 ms<br>64 bytes from 39.156.69.79: icmp_seq=3 ttl=48 time=28.228 ms<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/2021/04/30/JavaScript/"/>
    <url>/2021/04/30/JavaScript/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式断言"><a href="#正则表达式断言" class="headerlink" title="正则表达式断言"></a>正则表达式断言</h1><p>所谓断言，就是指明某个字符串前边或者后边，将会出现满足某种规律的字符串。<br>断言术语命名的规律：无论先行还是后发，都是相对于目标字符串而言。<br>例如：目标字符串后边有条件，可以理解为目标字符串在前，就用先行断言，放在目标字符串之后。</p><table><thead><tr><th>Expression</th><th>术语</th><th>解释</th></tr></thead><tbody><tr><td>(?&#x3D;X)</td><td>零宽正向先行断言</td><td>仅当子表达式 X 在 此位置的右侧匹配时才继续匹配。例如，&#x2F;w+(?&#x3D;&#x2F;d) 与后跟数字的单词匹配，而不与该数字匹配。此构造不会回溯。</td></tr><tr><td>(?!X)</td><td>零宽负向先行断言</td><td>仅当子表达式 X 不在 此位置的右侧匹配时才继续匹配。例如，例如，&#x2F;w+(?!&#x2F;d) 与后不跟数字的单词匹配，而不与该数字匹配 。</td></tr><tr><td>(?&lt;&#x3D;X)</td><td>零宽正向后发断言</td><td>仅当子表达式 X 在 此位置的左侧匹配时才继续匹配。例如，(?&lt;&#x3D;19)99 与跟在 19 后面的 99 的实例匹配。此构造不会回溯。</td></tr><tr><td>(?&lt;!X)</td><td>零宽负向后发断言</td><td>仅当子表达式 X 不在此位置的左侧匹配时才继续匹配。例如，(?&lt;!19)99 与不跟在 19 后面的 99 的实例匹配</td></tr></tbody></table><h1 id="通过索引删除元素"><a href="#通过索引删除元素" class="headerlink" title="通过索引删除元素"></a>通过索引删除元素</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">delElement</span> = (<span class="hljs-params">arr, index</span>) =&gt; arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, index -<span class="hljs-number">1</span>).<span class="hljs-title function_">concat</span>(arr.<span class="hljs-title function_">slice</span>(index))<br></code></pre></td></tr></table></figure><h1 id="复制页面内容"><a href="#复制页面内容" class="headerlink" title="复制页面内容"></a>复制页面内容</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ele = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-comment">// 从页面获得复制内容</span><br><span class="hljs-comment">// Array.from($0.querySelectorAll(&#x27;canvas&#x27;)).map(o=&gt;`&lt;img src=&quot;$&#123;o.toDataURL()&#125;&quot;&gt;`).join(&#x27;\n&#x27;);</span><br>ele.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;要复制的内容&#x27;</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">append</span>(ele);<br>ele.<span class="hljs-title function_">focus</span>();<br>ele.<span class="hljs-title function_">select</span>();<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;Copy&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>ele.<span class="hljs-title function_">remove</span>()<br></code></pre></td></tr></table></figure><h1 id="Array-方法"><a href="#Array-方法" class="headerlink" title="Array 方法"></a>Array 方法</h1><h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><p>pop()方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> plants = [<span class="hljs-string">&#x27;broccoli&#x27;</span>, <span class="hljs-string">&#x27;cauliflower&#x27;</span>, <span class="hljs-string">&#x27;cabbage&#x27;</span>, <span class="hljs-string">&#x27;kale&#x27;</span>, <span class="hljs-string">&#x27;tomato&#x27;</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(plants.<span class="hljs-title function_">pop</span>());<br><span class="hljs-comment">// expected output: &quot;tomato&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(plants);<br><span class="hljs-comment">// expected output: Array [&quot;broccoli&quot;, &quot;cauliflower&quot;, &quot;cabbage&quot;, &quot;kale&quot;]</span><br><br>plants.<span class="hljs-title function_">pop</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(plants);<br><span class="hljs-comment">// expected output: Array [&quot;broccoli&quot;, &quot;cauliflower&quot;, &quot;cabbage&quot;]</span><br></code></pre></td></tr></table></figure><h2 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h2><p>shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> firstElement = array1.<span class="hljs-title function_">shift</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array1);<br><span class="hljs-comment">// expected output: Array [2, 3]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(firstElement);<br><span class="hljs-comment">// expected output: 1</span><br></code></pre></td></tr></table></figure><h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h2><p>unshift()方法将一个或多个元素添加到数组的开头，并返回该数组的新长度(该方法修改原有数组)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array1.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>));<br><span class="hljs-comment">// expected output: 5</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array1);<br><span class="hljs-comment">// expected output: Array [4, 5, 1, 2, 3]</span><br></code></pre></td></tr></table></figure><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>some() 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><br><span class="hljs-comment">// checks whether an element is even</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">even</span> = (<span class="hljs-params">element</span>) =&gt; element % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array.<span class="hljs-title function_">some</span>(even));<br><span class="hljs-comment">// expected output: true</span><br></code></pre></td></tr></table></figure><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>arr.slice([begin[, end]])<br>slice() 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end）。原始数组不会被改变。</p><h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><p>array.splice(start[, deleteCount[, item1[, item2[, …]]]])<br>splice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>box-shadow应用</title>
    <link href="/2021/04/30/box-shadow%E5%A4%A7%E6%9C%89%E5%8F%AF%E4%B8%BA/"/>
    <url>/2021/04/30/box-shadow%E5%A4%A7%E6%9C%89%E5%8F%AF%E4%B8%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="边框-阴影"><a href="#边框-阴影" class="headerlink" title="边框 阴影"></a>边框 阴影</h1><p>边框用来制作三角形的应用已经烂大街了,再加上阴影的特性:可以在一个元素上作用多层阴影,感觉此处若细心发掘,必大有可为.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.dot</span><span class="hljs-selector-class">.active</span>&#123;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">#ff0000</span>, <br>        <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">#0091ff</span>, <br>        <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">#00f5fe</span>, <br>        <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">#fa00f0</span>, <br>        <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">#6453bb</span>, <br>        <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">#18611b</span>, <br>        <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">#f1ed23</span>, <br>        <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">#14e51e</span>;<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.dot</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">300px</span> auto;<br>    <span class="hljs-attribute">border-top-color</span>: <span class="hljs-number">#c53a3a</span>;<br>    <span class="hljs-attribute">border-left-color</span>: <span class="hljs-number">#e79c9c</span>;<br>    <span class="hljs-attribute">border-right-color</span>: <span class="hljs-number">#f4ee11</span>;<br>    <span class="hljs-attribute">border-bottom-color</span>: <span class="hljs-number">#51c1c0</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">50px</span> -<span class="hljs-number">50px</span> <span class="hljs-number">0</span> <span class="hljs-number">#ff0000</span>, <br>        <span class="hljs-number">50px</span> <span class="hljs-number">50px</span> <span class="hljs-number">0</span> <span class="hljs-number">#0091ff</span>, <br>        -<span class="hljs-number">50px</span> -<span class="hljs-number">50px</span> <span class="hljs-number">0</span> <span class="hljs-number">#00f5fe</span>, <br>        -<span class="hljs-number">50px</span> <span class="hljs-number">50px</span> <span class="hljs-number">0</span> <span class="hljs-number">#fa00f0</span>, <br>        <span class="hljs-number">100px</span> <span class="hljs-number">100px</span> <span class="hljs-number">0</span> <span class="hljs-number">#6453bb</span>, <br>        <span class="hljs-number">100px</span> -<span class="hljs-number">100px</span> <span class="hljs-number">0</span> <span class="hljs-number">#18611b</span>, <br>        -<span class="hljs-number">100px</span> <span class="hljs-number">100px</span> <span class="hljs-number">0</span> <span class="hljs-number">#f1ed23</span>, <br>        -<span class="hljs-number">100px</span> -<span class="hljs-number">100px</span> <span class="hljs-number">0</span> <span class="hljs-number">#14e51e</span>;<br>    <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.51</span>, -<span class="hljs-number">0.67</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2.15</span>);<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://img2.ink-lotus.ink/odmbug/20190801/5u3OilFA4PT1.gif" alt="mark"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>垂直居中布局</title>
    <link href="/2021/04/30/csscenter/"/>
    <url>/2021/04/30/csscenter/</url>
    
    <content type="html"><![CDATA[<h1 id="居中的各种实现方案"><a href="#居中的各种实现方案" class="headerlink" title="居中的各种实现方案"></a>居中的各种实现方案</h1><p><strong>html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span>DEMO<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="水平居中布局的实现"><a href="#水平居中布局的实现" class="headerlink" title="水平居中布局的实现"></a>水平居中布局的实现</h1><h2 id="1-inline-block-text-align"><a href="#1-inline-block-text-align" class="headerlink" title="(1) inline-block + text-align"></a>(1) inline-block + text-align</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span>&#123;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><span class="hljs-selector-class">.child</span>&#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-table-margin"><a href="#2-table-margin" class="headerlink" title="(2) table + margin"></a>(2) table + margin</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.child</span>&#123;<br>    <span class="hljs-attribute">display</span>: table;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-absolute-transform"><a href="#3-absolute-transform" class="headerlink" title="(3) absolute + transform"></a>(3) absolute + transform</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span>&#123;<br>    <span class="hljs-attribute">position</span>:relative;<br>&#125;<br><span class="hljs-selector-class">.child</span>&#123;<br>    <span class="hljs-attribute">position</span>:absolute;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-flex-justify-content"><a href="#4-flex-justify-content" class="headerlink" title="(4) flex + justify-content"></a>(4) flex + justify-content</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="垂直居中的实现"><a href="#垂直居中的实现" class="headerlink" title="垂直居中的实现"></a>垂直居中的实现</h1><h2 id="1-table-cell-vertical-align"><a href="#1-table-cell-vertical-align" class="headerlink" title="(1) table-cell + vertical-align"></a>(1) table-cell + vertical-align</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span>&#123;<br>    <span class="hljs-attribute">display</span>: table-cell;<br>    <span class="hljs-attribute">vertical-align</span>:middle;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-absolute-transform"><a href="#2-absolute-transform" class="headerlink" title="(2) absolute + transform"></a>(2) absolute + transform</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span>&#123;<br>    <span class="hljs-attribute">position</span>:relative;<br>&#125;<br><span class="hljs-selector-class">.child</span>&#123;<br>    <span class="hljs-attribute">position</span>:absolute;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateY</span>(-<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-flex-align-items"><a href="#3-flex-align-items" class="headerlink" title="(3) flex + align-items"></a>(3) flex + align-items</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="居中（水平居中-垂直居中）"><a href="#居中（水平居中-垂直居中）" class="headerlink" title="居中（水平居中+垂直居中）"></a>居中（水平居中+垂直居中）</h1><h2 id="1-inline-block-text-align-table-cell-vertical-align"><a href="#1-inline-block-text-align-table-cell-vertical-align" class="headerlink" title="(1) inline-block+text-align + table-cell+vertical-align"></a>(1) inline-block+text-align + table-cell+vertical-align</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span>&#123;<br>    <span class="hljs-attribute">text-align</span>:center;<br>    <span class="hljs-attribute">display</span>: table-cell;<br>    <span class="hljs-attribute">vertical-align</span>:middle;<br>&#125;<br><span class="hljs-selector-class">.child</span>&#123;<br>    <span class="hljs-attribute">display</span>:inline-block;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-absolute-transform-1"><a href="#2-absolute-transform-1" class="headerlink" title="(2) absolute + transform"></a>(2) absolute + transform</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span>&#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.child</span>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>) <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-flex-justify-content-align-items"><a href="#3-flex-justify-content-align-items" class="headerlink" title="(3) flex + justify-content + align-items"></a>(3) flex + justify-content + align-items</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2021/04/30/git2/"/>
    <url>/2021/04/30/git2/</url>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>git一个VCS(version control system)工具&#x2F;版本控制工具&#x2F;版本管理工具</p><p>git在centos7中被默认安装1.x版本。</p><h1 id="git升级"><a href="#git升级" class="headerlink" title="git升级"></a>git升级</h1><p>某些场景下，工作需要git2.x才能继续。下面的代码演示使用yum更新git版本。下面的命令可能会提示权限不足，在命令前面加上<code>sudo </code>重试即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 1 卸载老版本git， yum remove 程序名</span><br>&gt; yum remove git<br><span class="hljs-comment"># 安装 epel</span><br>&gt; yum install -y epel-release<br><span class="hljs-comment"># 这个地址可能会更新，google ius即可</span><br>&gt; rpm -ivh https://repo.ius.io/ius-release-el7.rpm<br><span class="hljs-comment"># 2 搜索git2版本</span><br>&gt; yum list git2<br><span class="hljs-comment"># 3. 在列表中找到git2xx.x86_x64字样的字符串。取 . 前面的git2xx为软件名称</span><br>&gt; yum install -y git224<br><span class="hljs-comment"># 4. 验证安装</span><br>&gt; git --version<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>https-cert</title>
    <link href="/2021/04/30/https-cert/"/>
    <url>/2021/04/30/https-cert/</url>
    
    <content type="html"><![CDATA[<h1 id="ACEM工具"><a href="#ACEM工具" class="headerlink" title="ACEM工具"></a>ACEM工具</h1><p>演示linux环境下通过dns方式申请证书<br>前提条件</p><ul><li>有域名</li></ul><h2 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; curl  https://get.acme.sh | sh<br>&gt; acme.sh  --issue  --dns  -d mydomain.com<br></code></pre></td></tr></table></figure><h2 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h2><p>添加 dns txt记录<br><img src="https://img4.ink-lotus.ink/20210324181510.jpg" alt="添加dns示例图"></p><h2 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h2><p>带dns记录生效后，继续操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; acme.sh  --renew -d mydomain.com <br>--yes-I-know-dns-manual-mode-enough-go-ahead-please<br>&gt; <br></code></pre></td></tr></table></figure><h2 id="step4"><a href="#step4" class="headerlink" title="step4"></a>step4</h2><p>验证 txt记录是否生效</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><br></code></pre></td></tr></table></figure><h2 id="step5-可选"><a href="#step5-可选" class="headerlink" title="step5 [可选]"></a>step5 [可选]</h2><p>copy&#x2F;安装 证书</p><p>前面证书生成以后, 接下来需要把证书 copy 到真正需要用它的地方.</p><p>注意, 默认生成的证书都放在安装目录下: ~&#x2F;.acme.sh&#x2F;, 请不要直接使用此目录下的文件, 例如: 不要直接让 nginx&#x2F;apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用, 而且目录结构可能会变化.</p><p>正确的使用方法是使用 –install-cert 命令,并指定目标位置, 然后证书文件会被copy到相应的位置, 例如:</p><h3 id="Nginx-example"><a href="#Nginx-example" class="headerlink" title="Nginx example:"></a>Nginx example:</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">acme.sh --install-cert -d example.com \<br>--key-file       /path/to/keyfile/in/nginx/key.pem  \<br>--fullchain-file /path/to/fullchain/nginx/cert.pem \<br>--reloadcmd     <span class="hljs-string">&quot;service nginx force-reload&quot;</span><br></code></pre></td></tr></table></figure><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="https://github.com/acmesh-official/acme.sh">ACME客户端git仓库地址</a><br><a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E">参考</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac使用</title>
    <link href="/2021/04/30/mac%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/04/30/mac%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="使-bashrc立即生效"><a href="#使-bashrc立即生效" class="headerlink" title="使.bashrc立即生效"></a>使<code>.bashrc</code>立即生效</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">source</span> ~/.bashrc</span><br></code></pre></td></tr></table></figure><h1 id="添加快捷命令"><a href="#添加快捷命令" class="headerlink" title="添加快捷命令"></a>添加快捷命令</h1><ul><li>打开<code>~/.bashrc</code>文件</li><li>添加命令alias，如<code>alias rm=&#39;rm -i&#39;</code></li><li>使<code>.bashrc</code>立即生效</li></ul><h1 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h1><p><code>sudo vim /etc/hosts</code></p><h1 id="Mac系统显示隐藏文件"><a href="#Mac系统显示隐藏文件" class="headerlink" title="Mac系统显示隐藏文件"></a>Mac系统显示隐藏文件</h1><p>Command+Shift+. 可以显示隐藏文件、文件夹，再按一次，恢复隐藏；<br>Command+Shift+G 可以前往任何文件夹，包括隐藏文件夹。</p><p>最简单的是通过在Mac终端输入命令。<br>显示隐藏文件（注意空格和大小写）：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">defaults write com.apple.finder AppleShowAllFiles -<span class="hljs-type">bool</span> <span class="hljs-literal">true</span> <br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">defaults write com<span class="hljs-selector-class">.apple</span><span class="hljs-selector-class">.finder</span> AppleShowAllFiles YES<br></code></pre></td></tr></table></figure><p>不显示隐藏文件：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">defaults write com.apple.finder AppleShowAllFiles -<span class="hljs-type">bool</span> <span class="hljs-literal">false</span> <br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">defaults <span class="hljs-keyword">write</span> com.apple.finder AppleShowAllFiles <span class="hljs-keyword">NO</span><br></code></pre></td></tr></table></figure><p>输入完成后，单击Enter键，然后直接退出终端，重新启动Finder即可。<br>重启Finder：首先强制退出Finder，再重新启动Finder即可。</p><h1 id="mac-上使用emoji"><a href="#mac-上使用emoji" class="headerlink" title="mac 上使用emoji"></a>mac 上使用emoji</h1><p><code>Command</code> + <code>Control</code> + <code>Spacebar</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nginx</title>
    <link href="/2021/04/30/nginx/"/>
    <url>/2021/04/30/nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="启动失败可能的原因"><a href="#启动失败可能的原因" class="headerlink" title="启动失败可能的原因"></a>启动失败可能的原因</h2><ul><li>相关文件（nginx执行权限&#x2F;log文件读写）没有权限。chmod即可</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>nginx<a href="https://www.runoob.com/linux/nginx-install-setup.html">安装参考文档</a></p><h2 id="systemd-service-file"><a href="#systemd-service-file" class="headerlink" title="systemd service file"></a>systemd service file</h2><p> &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=The NGINX HTTP and reverse proxy server<br><span class="hljs-attr">After</span>=syslog.target network-<span class="hljs-literal">on</span>line.target remote-fs.target nss-lookup.target<br><span class="hljs-attr">Wants</span>=network-<span class="hljs-literal">on</span>line.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=forking<br><span class="hljs-attr">PIDFile</span>=/run/nginx.pid<br><span class="hljs-attr">ExecStartPre</span>=/usr/sbin/nginx -t<br><span class="hljs-attr">ExecStart</span>=/usr/sbin/nginx<br><span class="hljs-attr">ExecReload</span>=/usr/sbin/nginx -s reload<br><span class="hljs-attr">ExecStop</span>=/bin/kill -s QUIT <span class="hljs-variable">$MAINPID</span><br><span class="hljs-attr">PrivateTmp</span>=<span class="hljs-literal">true</span><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h2 id="403可能的原因"><a href="#403可能的原因" class="headerlink" title="403可能的原因"></a>403可能的原因</h2><ul><li>root设置路径错误</li><li>root下不存在默认文档</li><li>默认文档设置不正确</li></ul><h2 id="nginx服务管理"><a href="#nginx服务管理" class="headerlink" title="nginx服务管理"></a>nginx服务管理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; service nginx force-reload<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node小技巧</title>
    <link href="/2021/04/30/node%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2021/04/30/node%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="package-json-添加串联脚本"><a href="#package-json-添加串联脚本" class="headerlink" title="package.json 添加串联脚本"></a>package.json 添加串联脚本</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;script&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm run dev &amp; npm run lint&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="整理package-json的script脚本"><a href="#整理package-json的script脚本" class="headerlink" title="整理package.json的script脚本"></a>整理package.json的script脚本</h2><p>使用<code>scripty</code>插件</p><h2 id="获取命令行参数"><a href="#获取命令行参数" class="headerlink" title="获取命令行参数"></a>获取命令行参数</h2><p>使用<code>yargs-parser</code>插件，获取命令行<code>webpcck --mode development</code>中的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> argv = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;yargs-parser&#x27;</span>)(process.<span class="hljs-property">argv</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>))<br><span class="hljs-comment">//output  &#123; _: [], mode : &quot;development&#125;</span><br></code></pre></td></tr></table></figure><h2 id="让package命令更清爽，简化scripts脚本"><a href="#让package命令更清爽，简化scripts脚本" class="headerlink" title="让package命令更清爽，简化scripts脚本"></a>让package命令更清爽，简化scripts脚本</h2><p><code>scripty</code>插件，使用方法</p><ul><li>安装依赖<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install --save-dev scripty</span><br></code></pre></td></tr></table></figure></li><li>在项目根目录新建<code>scripts</code>目录</li><li>配置package.json，如命令<code>npm run client:dev</code>的配置<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;client:dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scripty&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// clinet为目录名，dev为shell脚本名称</span><br></code></pre></td></tr></table></figure></li><li>新建脚本shell。在<code>scripts</code>，目录下新建<code>client目录</code>，在<code>client目录</code>目录下新建<code>dev.sh</code>shell脚本文件</li><li>书写脚本。在<code>dev.sh</code>中写复杂的scipt脚本，如<code>webpack --mode development</code></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nvm</title>
    <link href="/2021/04/30/nvm/"/>
    <url>/2021/04/30/nvm/</url>
    
    <content type="html"><![CDATA[<h1 id="nvm-安装"><a href="#nvm-安装" class="headerlink" title="nvm 安装"></a>nvm 安装</h1><p><a href="https://github.com/nvm-sh/nvm#install--update-script">Github</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>软件安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux常用命令</title>
    <link href="/2021/04/30/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/04/30/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="linux-按照名称查询进程"><a href="#linux-按照名称查询进程" class="headerlink" title="linux 按照名称查询进程"></a>linux 按照名称查询进程</h1><p><code>ps -ef|grep node|grep -v grep</code></p><h1 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h1><p>将&#x2F;opt&#x2F;a&#x2F;下的a目录复制到 &#x2F;opt&#x2F;b&#x2F;目录下<br><code>cp -r /opt/a/ /opt/b/ #将/opt/a/下的a.录复制到 /opt/b/目录</code></p><p>cp -r &#x2F;home&#x2F;wb-zxd662335&#x2F;AcXone&#x2F;tempCode&#x2F;apxoneportal&#x2F;static &#x2F;home&#x2F;wb-zxd662335&#x2F;AcXone&#x2F;apxoneportal</p><h1 id="查看文件大小"><a href="#查看文件大小" class="headerlink" title="查看文件大小"></a>查看文件大小</h1><p><code>ls -lht</code></p><h1 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h1><p><a href="https://www.cnblogs.com/sunlinsong/p/13779970.html">cnblog</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 使用wget下载单个文件</span><br>&gt; wget http://www.linuxde.net/testfile.zip<br><span class="hljs-comment"># 下载并以不同的文件名保存</span><br>&gt; wget -O wordpress.zip http://www.linuxde.net/download.aspx?<span class="hljs-built_in">id</span>=1080<br><span class="hljs-comment"># 使用 wget -c 断点续传</span><br>&gt; wget -c https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz<br></code></pre></td></tr></table></figure><h1 id="使用zip压缩文件"><a href="#使用zip压缩文件" class="headerlink" title="使用zip压缩文件"></a>使用zip压缩文件</h1><p>zip -r file.zip .&#x2F;app .&#x2F;web -x .&#x2F;web&#x2F;node_modules</p><p>将<code>./app</code>,<code>./web</code> 目录压缩成<code>file.zip</code>并忽略<code>./web/node_modules</code></p><h1 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h1><p><a href="https://www.cnblogs.com/luozeng/p/8674529.html">cnblog</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 解压 tar包</span><br>tar –xvf file.tar<br><span class="hljs-comment"># 解压tar.gz</span><br>tar -xzvf file.tar.gz<br><span class="hljs-comment"># 解压 tar.bz2</span><br>tar -xjvf file.tar.bz2  <br><span class="hljs-comment"># 解压tar.Z</span><br>tar –xZvf file.tar.Z  <br><span class="hljs-comment"># 解压rar</span><br>unrar e file.rar<br><span class="hljs-comment"># 解压zip</span><br>unzip file.zip<br></code></pre></td></tr></table></figure><h1 id="重命名文件夹"><a href="#重命名文件夹" class="headerlink" title="重命名文件夹"></a>重命名文件夹</h1><p>例子：将目录A重命名为B<br><code>mv A B</code></p><p>例子：将&#x2F;a目录移动到&#x2F;b下，并重命名为c<br><code>mv /a /b/c</code></p><h1 id="允许密码登录"><a href="#允许密码登录" class="headerlink" title="允许密码登录"></a>允许密码登录</h1><p>vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config  保证下面两个配置是如下设置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#允许使用密码登录</span><br>PasswordAuthentication <span class="hljs-built_in">yes</span><br><span class="hljs-comment">#允许root认证登录</span><br>PermitRootLogin <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; reboot<br></code></pre></td></tr></table></figure><h1 id="linux-添加环境变量-PATH"><a href="#linux-添加环境变量-PATH" class="headerlink" title="linux 添加环境变量 $PATH"></a>linux 添加环境变量 $PATH</h1><p>PATH存储文件位置<br>&#x2F;etc&#x2F;profile，<del>&#x2F;.bashrc，</del>&#x2F;.bash_profile</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; <span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:&lt;PATH1&gt;<br>&gt; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br>&gt; sudo <span class="hljs-built_in">export</span> PATH=/home/tuotu/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><h1 id="linux-文件更改权限"><a href="#linux-文件更改权限" class="headerlink" title="linux 文件更改权限"></a>linux 文件更改权限</h1><p>chmod命令语法： chmod [-cfvR] [–help] [–version] mode file…</p><h2 id="符号模式"><a href="#符号模式" class="headerlink" title="符号模式"></a>符号模式</h2><p>使用符号模式可以设置多个项目：who（用户类型），operator（操作符）和 permission（权限），每个项目的设置可以用逗号隔开。<br>命令 chmod 将修改 who 指定的用户类型对文件的访问权限，用户类型由一个或者多个字母在 who 的位置来说明，如 who 的符号模式表所示:</p><table><thead><tr><th>who</th><th>用户类型</th><th>说明</th></tr></thead><tbody><tr><td>u</td><td>user</td><td>文件所有者</td></tr><tr><td>g</td><td>group</td><td>文件所有者所在组</td></tr><tr><td>o</td><td>others</td><td>所有其他用户</td></tr><tr><td>a</td><td>all</td><td>所用用户, 相当于 ugo</td></tr><tr><td>permission 的符号模式表:</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>模式</th><th>名字</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>读</td><td>设置为可读权限</td></tr><tr><td>w</td><td>写</td><td>设置为可写权限</td></tr><tr><td>x</td><td>执行权限</td><td>设置为可执行权限</td></tr><tr><td>X</td><td>特殊执行权限</td><td>只有当文件为目录文件，或者其他类型的用户有可执行权限时，才将文件权限设置可执行</td></tr><tr><td>s</td><td>setuid&#x2F;gid</td><td>当文件被执行时，根据who参数指定的用户类型设置文件的setuid或者setgid权限</td></tr><tr><td>t</td><td>粘贴位</td><td>设置粘贴位，只有超级用户可以设置该位，只有文件所有者u可以使用该位</td></tr></tbody></table><h2 id="八进制语法"><a href="#八进制语法" class="headerlink" title="八进制语法"></a>八进制语法</h2><ul><li>| 权限 | rwx | 二进制<br>———|———-|———|———<br>7 | 读 + 写 + 执行 | rwx | 111<br>6 | 读 + 写 | rw- | 110<br>5 | 读 + 执行 | r-x | 101<br>4 | 只读 | r– | 100<br>3 | 写 + 执行 | -wx | 011<br>2 | 只写 | -w- | 010<br>1 | 只执行 | –x | 001<br>0 | 无 | — | 000</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; <span class="hljs-built_in">chmod</span> ugo+r file1.txt<br>&gt; <span class="hljs-built_in">chmod</span> a+r file1.txt<br>&gt; <span class="hljs-built_in">chmod</span> ug+w,o-w file1.txt file2.txt<br>&gt; <span class="hljs-built_in">chmod</span> u+x ex1.py<br>&gt; <span class="hljs-built_in">chmod</span> -R a+r *<br>&gt; <span class="hljs-built_in">chmod</span> 777 file<br>&gt; <span class="hljs-built_in">chmod</span> abc file<br><span class="hljs-comment"># 其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。</span><br>&gt; <span class="hljs-built_in">chmod</span> a=rwx file<br></code></pre></td></tr></table></figure><h1 id="查询软件包的文件列表"><a href="#查询软件包的文件列表" class="headerlink" title="查询软件包的文件列表"></a>查询软件包的文件列表</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; rpm -ql nginx<br></code></pre></td></tr></table></figure><h1 id="Unit-管理-systemctl-服务管理"><a href="#Unit-管理-systemctl-服务管理" class="headerlink" title="Unit 管理&#x2F;systemctl&#x2F;服务管理"></a>Unit 管理&#x2F;systemctl&#x2F;服务管理</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 立即启动一个服务</span><br>$ sudo systemctl start apache.service<br><br><span class="hljs-comment"># 立即停止一个服务</span><br>$ sudo systemctl stop apache.service<br><br><span class="hljs-comment"># 重启一个服务</span><br>$ sudo systemctl restart apache.service<br><br><span class="hljs-comment"># 杀死一个服务的所有子进程</span><br>$ sudo systemctl <span class="hljs-built_in">kill</span> apache.service<br><br><span class="hljs-comment"># 重新加载一个服务的配置文件</span><br>$ sudo systemctl reload apache.service<br><br><span class="hljs-comment"># 重载所有修改过的配置文件</span><br>$ sudo systemctl daemon-reload<br><br><span class="hljs-comment"># 显示某个 Unit 的所有底层参数</span><br>$ systemctl show httpd.service<br><br><span class="hljs-comment"># 显示某个 Unit 的指定属性的值</span><br>$ systemctl show -p CPUShares httpd.service<br><br><span class="hljs-comment"># 设置某个 Unit 的指定属性</span><br>$ sudo systemctl set-property httpd.service CPUShares=500<br><br><span class="hljs-comment"># 查看服务状态</span><br>$ systemctl status httpd.service<br></code></pre></td></tr></table></figure><h2 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># sudo ln -s 链接名称 链接目标路径</span><br>&gt; sudo <span class="hljs-built_in">ln</span> -s ./sites-available/code-server ./sites-enabled/code-server<br></code></pre></td></tr></table></figure><h2 id="scp拷贝远程服务器文件"><a href="#scp拷贝远程服务器文件" class="headerlink" title="scp拷贝远程服务器文件"></a>scp拷贝远程服务器文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sj">&gt; scp 用户名@服务器:远程文件目录 本地文件目录<br>// eg<br>&gt; scp lighthouse@121.4.137.7:/home/lighthouse/projects/DemoProjects/Subject1/Library/DB/Book.db /Users/jacksion/Desktop<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue SSR</title>
    <link href="/2021/04/30/vue-ssr/"/>
    <url>/2021/04/30/vue-ssr/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-SSR"><a href="#Vue-SSR" class="headerlink" title="Vue SSR"></a>Vue SSR</h1><p>SSR（Server Side Render）是服务端渲染简写，SSR解决的问题是优化SEO，缓解客户端渲染的压力。Vue ssr的流程是</p><blockquote><p>将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记”激活”为客户端上完全可交互的应用程序。<br>– <a href="https://ssr.vuejs.org/zh/">Vue.js 服务器端渲染指南</a></p></blockquote><h1 id="项目结构及目录-文件作用"><a href="#项目结构及目录-文件作用" class="headerlink" title="项目结构及目录&#x2F;文件作用"></a>项目结构及目录&#x2F;文件作用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sj">.<br>├── build                           webpack打包配置目录<br>│   ├── webapck.base.js             webpack公共配置<br>│   ├── webpack.client.dev.js       客户端打包配置<br>│   └── webpack.server.dev.js       服务端打包配置<br>├── dist                            打包输出目录<br>│   ├── client.bundle.js<br>│   ├── index.html<br>│   ├── main.css<br>│   └── server-bundle.js<br>├── src                             项目代码目录<br>│   ├── client                      客户端代码<br>│   │   ├── App.vue                 vue组件<br>│   │   ├── app.js                  vue程序启动入口<br>│   │   ├── components              组件目录<br>│   │   ├── entry.client.js         客户端打包入口<br>│   │   ├── entry.server.js         服务端打包入口<br>│   │   ├── index.template.html     程序入口html<br>│   │   ├── router                  vue前端路由目录<br>│   │   ├── store                   vuex目录<br>│   │   └── views                   视图目录<br>│   └── server                      服务端代码目录<br>│       ├── app.js                  服务端程序入口<br>│       └── router                  服务端路由<br>├── package.json                    <br>├── yarn-error.log<br>└── yarn.lock<br></code></pre></td></tr></table></figure><h1 id="ssr-思路"><a href="#ssr-思路" class="headerlink" title="ssr 思路"></a>ssr 思路</h1><p>客户端的代码与纯客户端渲染的的vue项目基本类似，有vue使用经验的同学都比较熟悉上面相关代码的及目录的作用。aap.js不同的是纯客户端渲染直接导出跟组件，SSR则要导出一个函数，调用这个函数可以得到一个跟组件实例。服务端要对每个前端路由做相应的后端路由，是为了当用户在随机一个页面点击刷新按钮的时候，服务端能够返回正确的渲染结果。</p><p>客户端程序的启动流程 </p><h1 id="用到的npm包"><a href="#用到的npm包" class="headerlink" title="用到的npm包"></a>用到的npm包</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 编译 ES 代码</span><br>    <span class="hljs-attr">&quot;@babel/core&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.13.10&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@babel/plugin-transform-runtime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.13.10&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@babel/preset-env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.13.10&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-comment">// vue-loader 依赖的包，处理单文件组件</span><br>    <span class="hljs-attr">&quot;@vue/compiler-sfc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.7&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-comment">// --------- 一些loader---------</span><br>    <span class="hljs-comment">// vue 组件loader</span><br>    <span class="hljs-attr">&quot;vue-loader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^16.1.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// js 打包loader</span><br>    <span class="hljs-attr">&quot;babel-loader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^8.2.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// css 处理 loader</span><br>    <span class="hljs-attr">&quot;css-loader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.1.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// ssr需要忽略css用到的loader</span><br>    <span class="hljs-attr">&quot;ignore-loader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.1.2&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-comment">// --------- 插件 ---------</span><br>    <span class="hljs-comment">// webpack 编译结果自动注入html的插件</span><br>    <span class="hljs-attr">&quot;html-webpack-plugin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.3.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 提取css 到但文件插件</span><br>    <span class="hljs-attr">&quot;mini-css-extract-plugin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.3.9&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-comment">// 开发中 代码变更重启服务，代码强制更新</span><br>    <span class="hljs-attr">&quot;nodemon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.7&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-comment">// 打包工具</span><br>    <span class="hljs-attr">&quot;webpack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.27.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 打包工具 命令行工具</span><br>    <span class="hljs-attr">&quot;webpack-cli&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.5.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 开发服务webpack插件</span><br>    <span class="hljs-attr">&quot;webpack-dev-server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.11.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 合并webpack 配置</span><br>    <span class="hljs-attr">&quot;webpack-merge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.7.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// webpack 后端编译解绑插件。否则node_modules中的依赖都将被分析，那将使包非常巨大</span><br>    <span class="hljs-attr">&quot;webpack-node-externals&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.5.2&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// ssr使用的后端框架</span><br>    <span class="hljs-attr">&quot;koa&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.13.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;koa-static&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@koa/router&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^10.0.0&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-comment">// vue ssr官方工具</span><br>    <span class="hljs-attr">&quot;@vue/server-renderer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.7&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 请求库，ssr时需要调用aip数据，支持同构</span><br>    <span class="hljs-attr">&quot;axios&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.21.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// vue 框架相关</span><br>    <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.7&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue-router&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.0.5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vuex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.0.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>webpack入门</title>
    <link href="/2021/04/30/webpack/"/>
    <url>/2021/04/30/webpack/</url>
    
    <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><blockquote><p>本质上，webpack 是一个用于现代 JavaScript 应用程序的 静态模块打包工具。 –  <a href="https://webpack.docschina.org/concepts/">webpack文档介绍</a></p></blockquote><p>我的理解：将程序代码及各种资源按照设置输出为符合目标环境要求的工具</p><h1 id="开始使用webpack"><a href="#开始使用webpack" class="headerlink" title="开始使用webpack"></a>开始使用webpack</h1><h2 id="cli方式"><a href="#cli方式" class="headerlink" title="cli方式"></a>cli方式</h2><p>这种方式可以直接在命令行里使用webapck打包，打包参数通过命令参数指定。</p><ul><li><p>新建目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; <span class="hljs-built_in">mkdir</span> use-cli<br>&gt; <span class="hljs-built_in">cd</span> use-cli<br></code></pre></td></tr></table></figure></li><li><p>安装webpack 依赖<br><code>npm i webpack webpack-cli -D</code></p></li><li><p>新建文件及代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// common.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">multi</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a * b;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> sum<br><br><span class="hljs-comment">// first.js</span><br><span class="hljs-keyword">import</span> &#123; sum &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./common&#x27;</span>;<br><br><span class="hljs-keyword">const</span> num1 = <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>);<br><span class="hljs-keyword">const</span> num2 = <span class="hljs-title function_">sum</span>(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>);<br><span class="hljs-keyword">const</span> res = <span class="hljs-title function_">sum</span>(num1, num2);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br></code></pre></td></tr></table></figure><p>也可以使用官网<a href="https://webpack.docschina.org/">demo</a> 的代码</p></li><li><p>在命令行输入下面的命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npx webpack --entry ./first.js  --output-path ./build<br></code></pre></td></tr></table></figure></li><li><p>查看webpack 的编译结果在当前目录下的buil的文件夹。<br>如果你先验证运行结果，新建一个html文件并将其build&#x2F;main.js引入即可。</p></li><li><p>更多cli用法可以参考官网，和<a href="https://webpack.docschina.org/api/#cli">CLI的介绍</a>。</p></li></ul><h2 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h2><p>另一种是在项目中与npm命令一起使用，通过配置npm命令来调用webpack来使用指定的配置文件进行打包。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; <span class="hljs-built_in">mkdir</span> webpack-demo<br>&gt; <span class="hljs-built_in">cd</span> webpack-demo<br>&gt; npm init -y<br>&gt; npm install webpack webpack-cli --D<br></code></pre></td></tr></table></figure><ul><li>在项目中填充<a href="https://webpack.docschina.org/guides/getting-started/">示例代码</a></li><li>运行<code>npx webpack</code></li></ul><p>执行上上面的操作后，就会在项目的根目录生成打包后的dist文件夹。这里虽然没有通过命令脚本参数和配置文件的方式给webpack设置打包参数，但webpack依然能够对项目进行打包，原因是webpack会使用默认配置打包项目</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>webpack插件</title>
    <link href="/2021/04/30/webpack%E6%8F%92%E4%BB%B6/"/>
    <url>/2021/04/30/webpack%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="TypeScript-Webpack环境搭建"><a href="#TypeScript-Webpack环境搭建" class="headerlink" title="TypeScript+Webpack环境搭建"></a>TypeScript+Webpack环境搭建</h1><h2 id="webpack-插件系列"><a href="#webpack-插件系列" class="headerlink" title="webpack 插件系列"></a>webpack 插件系列</h2><h3 id="构建成功，触发系统通知"><a href="#构建成功，触发系统通知" class="headerlink" title="构建成功，触发系统通知"></a>构建成功，触发系统通知</h3><p><code>webpack-build-notifier</code>插件，使用方法示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">WebpackBuildNotifierPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-build-notifier&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebpackBuildNotifierPlugin</span>(&#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;My Project Webpack Build&quot;</span>,<br>      <span class="hljs-comment">// logo: path.resolve(&quot;./img/favicon.png&quot;),</span><br>      <span class="hljs-attr">suppressSuccess</span>: <span class="hljs-literal">true</span><br>    &#125;)<br>  ]<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="构建过程友好日志"><a href="#构建过程友好日志" class="headerlink" title="构建过程友好日志"></a>构建过程友好日志</h3><p><code>friendly-errors-webpack-plugin</code>插件，能够将构建过程中在控制台产生的不需要关心的日志信息清理，并自定义输出构建成功的提示。eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">FriendlyErrorsWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;friendly-errors-webpack-plugin&#x27;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-attr">quiet</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">FriendlyErrorsWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">compilationSuccessInfo</span>: &#123;<br>        <span class="hljs-attr">messages</span>: [<span class="hljs-string">&#x27;You application is running here http://localhost:3000&#x27;</span>],<br>        <span class="hljs-attr">notes</span>: [<span class="hljs-string">&#x27;Some additionnal notes to be displayed unpon successful compilation&#x27;</span>]<br>      &#125;,<br>      <span class="hljs-attr">onErrors</span>: <span class="hljs-function">(<span class="hljs-params">severity, errors</span>) =&gt;</span> &#123;<br>      &#125;,<br>      <span class="hljs-comment">// should the console be cleared between each compilation?</span><br>      <span class="hljs-comment">// default is true</span><br>      <span class="hljs-attr">clearConsole</span>: <span class="hljs-literal">true</span><br>    &#125;),<br>  ]<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><h3 id="typescript-loader"><a href="#typescript-loader" class="headerlink" title="typescript loader"></a>typescript loader</h3><p><code>awesome-typescript-loader</code> loader,用于处理ts代码。eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">CheckerPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;awesome-typescript-loader&#x27;</span>)<br> <br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br> <br>  <span class="hljs-comment">// Currently we need to add &#x27;.ts&#x27; to the resolve.extensions array.</span><br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&#x27;.ts&#x27;</span>, <span class="hljs-string">&#x27;.tsx&#x27;</span>, <span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;.jsx&#x27;</span>]<br>  &#125;,<br> <br>  <span class="hljs-comment">// Source maps support (&#x27;inline-source-map&#x27; also works)</span><br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;source-map&#x27;</span>,<br> <br>  <span class="hljs-comment">// Add the loader for .ts files.</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.tsx?$/</span>,<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;awesome-typescript-loader&#x27;</span><br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">CheckerPlugin</span>()<br>  ]<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于package.json</title>
    <link href="/2021/04/30/%E5%85%B3%E4%BA%8Epackage.json/"/>
    <url>/2021/04/30/%E5%85%B3%E4%BA%8Epackage.json/</url>
    
    <content type="html"><![CDATA[<h1 id="package-json配置项"><a href="#package-json配置项" class="headerlink" title="package.json配置项"></a>package.json配置项</h1><p>package.json是npm项目的配置文件，记录了项目的相关说明及配置信息，这个文件内的数据是以JSON格式组织的。从<a href="https://docs.npmjs.com/cli/v7/configuring-npm/package-json">package-json配置文档</a>来看，它包含的配置项非常丰富。但并不是所有的配置项都是必选项。</p><h2 id="scripts-配置项"><a href="#scripts-配置项" class="headerlink" title="scripts 配置项"></a>scripts 配置项</h2><p>当使用<code>npm init</code>命令初始化完一个项目后，package.json被创建。其中<code>scirpt</code>默认配置如下。如果命令行继续运行<code>npm run test</code>, 控制台就会执行<code>test</code>任务，并推出。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>scripts配置节包含的是 任务名称和任务命令的键值对，所以可以在scripts配置节添加像test任务以类似的任务名和任务命令。如果命令比较长且参数较多，开发者需要注意任务命令中特殊字符的转义处理，使其符合JSON文本的格式。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    ...<br>    <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    ...<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="前置和后置脚本"><a href="#前置和后置脚本" class="headerlink" title="前置和后置脚本"></a>前置和后置脚本</h3><p>script配置的功能还不止如此，每个任务还支持前置任务和后置任务，示例配置如下。如果在命令行运行<code>npm run compress</code>，则下面这三个任务将被一次执行。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">&#123;</span><br><span class="language-xml">    ...</span><br><span class="language-xml">    &quot;scripts&quot;: &#123;</span><br><span class="language-xml">        &quot;precompress&quot;: &quot;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">executes</span> BEFORE the `compress` script &#125;&#125;</span><span class="language-xml">&quot;,</span><br><span class="language-xml">        &quot;compress&quot;: &quot;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">run</span> command to compress files &#125;&#125;</span><span class="language-xml">&quot;,</span><br><span class="language-xml">        &quot;postcompress&quot;: &quot;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">executes</span> AFTER `compress` script &#125;&#125;</span><span class="language-xml">&quot;</span><br><span class="language-xml">    &#125;</span><br><span class="language-xml">    ...</span><br><span class="language-xml">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="scripty"><a href="#scripty" class="headerlink" title="scripty"></a>scripty</h3><p>有时候任务命令脚本过长时就会显得package.json混乱和臃肿，npm工具<a href="https://www.npmjs.com/package/scripty">scripty</a>应运而生。<br>如何使用</p><ul><li>在项目根目录下新建<code>scripts</code>目录</li><li>新建以任务名称作为文件名称的shell文件,eg: test.sh</li><li>在shell文件中便携任务命令脚本</li><li>配置package.json的scripts命令为<code>scripty</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scripty&quot;</span><br>    <span class="hljs-attr">&quot;test1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scripty&quot;</span><br>    <span class="hljs-attr">&quot;test2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scripty&quot;</span><br>    <span class="hljs-attr">&quot;test3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scripty&quot;</span><br>    <span class="hljs-attr">&quot;test4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scripty&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><code>npm run test</code>测试任务<br>使用<code>scripty</code>的关键是，任务名称要与scripts目录下的脚本文件名称相对应。实际上使用scripty，将使开发者能够在shell中编写更加强大而丰富的功能，而不只是执行简单的任务命令。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>函数式编程</title>
    <link href="/2021/04/30/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <url>/2021/04/30/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><p>提及函数式编程，就不得不说范畴论</p><blockquote><p>范畴论是抽象地处理数学结构以及结构之间联系的一门数学理论 –<a href="https://baike.baidu.com/item/%E8%8C%83%E7%95%B4%E8%AE%BA">百度百科</a></p></blockquote><p>而函数式编程则是范畴论在计算机编程方面的应用。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h3><p>这里讲的函数是数学中函数的概念。函数概念含有三个要素：<strong>定义域A</strong>、<strong>值域B</strong>和<strong>对应法则f</strong>。其中核心是对应法则f，它是函数关系的本质特征。<br><img src="https://blackme.oss-cn-shanghai.aliyuncs.com/function.jpg" alt="函数"><br>映射关系是函数的本质特征</p><h3 id="函数式编程-1"><a href="#函数式编程-1" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>在计算机中，数据总是从某种状态经过计算转换成另一种状态，计算机计算则是执行不同状态的变形关系的过程。</p><blockquote><p>函数式编程是种编程方式，它将电脑运算视为函数的计算。函数编程语言最重要的基础是λ演算（lambda calculus），而且λ演算的函数可以接受函数当作输入（参数）和输出（返回值）。<br>和指令式编程相比，函数式编程强调函数的计算比指令的执行重要。<br>和过程化编程相比，函数式编程里函数的计算可随时调用。<br>–<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031">百度百科</a></p></blockquote><h2 id="JavaScript中的function"><a href="#JavaScript中的function" class="headerlink" title="JavaScript中的function"></a>JavaScript中的function</h2><p>函数式编程方法要在JavaScript中实践，必然绕不开JavaScript中的函数对象。在JavaScript中谈论函数，你一定听过</p><blockquote><p>函数是JavaScript语言中的一等公民<br>由此可见，函数是JavaScript语言中非常重要的组成部分。函数在JavaScript中的位高权重主要体现在以下几个方面：</p></blockquote><h3 id="可以作为表达式赋值给变量"><a href="#可以作为表达式赋值给变量" class="headerlink" title="可以作为表达式赋值给变量"></a>可以作为表达式赋值给变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> f1 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br></code></pre></td></tr></table></figure><p>上面的代码中，一个匿名函数对象被赋值给变量f1</p><h3 id="可以作为返回值"><a href="#可以作为返回值" class="headerlink" title="可以作为返回值"></a>可以作为返回值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> f1 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;create a function&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;function execute&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> f2 = <span class="hljs-title function_">f1</span>();<br><span class="hljs-title function_">f2</span>();<br></code></pre></td></tr></table></figure><p>上面的代码中，创建一个变量f2来接收f1函数执行后返回的另一个函数。因为f1返回的是一个函数，因此f2可以在需要的地方被调用。</p><h3 id="可以作为参数传递"><a href="#可以作为参数传递" class="headerlink" title="可以作为参数传递"></a>可以作为参数传递</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> f1 = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123; <span class="hljs-keyword">return</span> x * x; &#125;<br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-keyword">const</span> arr2 = arr1.<span class="hljs-title function_">map</span>(f1);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2)<br></code></pre></td></tr></table></figure><p>上面的代码中f1作为map函数的入参被传递。</p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>在ES6以前，JavaScript中语言中并没有像C语言这样的“块级作用域（block scope）”。函数内声明的变量不能被函数外访问，JavaScript中变量的访问权限是函数隔离的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">num</span>) &#123;<br>    <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(num == <span class="hljs-number">222</span>) &#123;<br>        <span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k=<span class="hljs-number">0</span>; k&lt;<span class="hljs-number">2</span>; k++) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k);<br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k);<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(j);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k);<br>&#125;<br><span class="hljs-title function_">f1</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>响应式元素高度</title>
    <link href="/2021/04/30/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6/"/>
    <url>/2021/04/30/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="响应式元素高度问题"><a href="#响应式元素高度问题" class="headerlink" title="响应式元素高度问题"></a>响应式元素高度问题</h1><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>先来看下面这段css代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span>  (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">320px</span>) &#123; <span class="hljs-selector-tag">html</span>,<span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">8px</span>&#125; &#125; </span><br><span class="language-css">    <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span>  (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">320px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">420px</span>) &#123; <span class="hljs-selector-tag">html</span>,<span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">8px</span>&#125; &#125;</span><br><span class="language-css">    <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span>  (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">420px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">520px</span>) &#123; <span class="hljs-selector-tag">html</span>,<span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">10px</span>&#125; &#125;</span><br><span class="language-css">    <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span>  (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">520px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">630px</span>) &#123; <span class="hljs-selector-tag">html</span>,<span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>&#125; &#125;</span><br><span class="language-css">    <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span>  (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">630px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">750px</span>) &#123; <span class="hljs-selector-tag">html</span>,<span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>&#125; &#125;</span><br><span class="language-css">    <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span>  (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">750px</span>) &#123; <span class="hljs-selector-tag">html</span>,<span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>&#125; &#125; </span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的代码使用媒体查询设置了不同分辨率下DOM根节点字体大小，在页面上添加一个盒子并做如下设置</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima">.<span class="hljs-built_in">box</span>&#123;<br>    <span class="hljs-built_in">width</span>: <span class="hljs-number">100</span><span class="hljs-symbol">%</span>;<br>    <span class="hljs-built_in">background</span>: pink;<br>    <span class="hljs-built_in">height</span>: 10<span class="hljs-built_in">rem</span>;<br>&#125;<br>&lt;div class=<span class="hljs-string">&quot;box&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>基于以上设置，页面应该有以下表现：</p><ul><li>屏幕宽度小于320px时，页面字体大小8px，.box高度 80px &#x3D; 10rem &#x3D; 10 * 8px</li><li>屏幕宽度介于320px到420px之间时，页面字体大小10px，.box高度 10rem &#x3D; 10 * 10px &#x3D; 100px</li><li>屏幕宽度介于420px到520px之间时，页面字体大小12px，.box高度 10rem &#x3D; 10 * 12px &#x3D; 120px</li><li>屏幕宽度介于520px到630px之间时，页面字体大小14px，.box高度 10rem &#x3D; 10 * 14px &#x3D; 140px</li><li>屏幕宽度介于630px到750px之间时，页面字体大小16px，.box高度 10rem &#x3D; 10 * 16px &#x3D; 160px</li><li>屏幕宽度大于750px时，页面字体大小16px，.box高度 10rem &#x3D; 10 * 16px &#x3D; 160px</li></ul><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>测试后发现，在谷歌浏览器下，调整浏览器大小，box颜色快最小高度只能大于等于120px。原因是</p><ul><li>谷歌浏览器对最小字体限制是12px;</li><li>当设置字体大小低于12px时，设置会失效，并且字体大小会被重置为12px</li></ul><p>基于以上媒体代码的字体大小设置，当屏幕宽度小于520px时，虽然对于 html,body{font-size: …px}的设置依然生效，但是html,body最终表现的font-size会被浏览器限制的字体大小(最小字体12px)覆盖。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>谷歌浏览器下css中使用rem作为单位时，html,body根节点字体大小设置小于12px是没有意义的。做响应式字体大小设置时，根节点字体大小设置是一个值得斟酌的重要设置。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>录屏经验</title>
    <link href="/2021/04/30/%E5%BD%95%E5%B1%8F%E7%BB%8F%E9%AA%8C-%E5%A3%B0%E9%9F%B3%E5%A4%84%E7%90%86/"/>
    <url>/2021/04/30/%E5%BD%95%E5%B1%8F%E7%BB%8F%E9%AA%8C-%E5%A3%B0%E9%9F%B3%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="录屏经验"><a href="#录屏经验" class="headerlink" title="录屏经验"></a>录屏经验</h1><h2 id="声音处理"><a href="#声音处理" class="headerlink" title="声音处理"></a>声音处理</h2><p>之前录屏使用的麦克风是几年前的麦克风，音量小，底噪超大。试了很多设置都没办法调到满意的效果，不知道是设备问题还是，音频设置方面的问题。百度了网上的解决方法，基本都是使用默认的Relteck默认驱动设置软件界面去调节，效果不大。<br><img src="https://blackme.oss-cn-shanghai.aliyuncs.com/blog/step1.PNG" alt="step1.PNG"><br>于是就想到了使用第三方软件可能会有更专业的功能。一番了解之后，发现英伟达显卡配套的直播音频处理套件NVIDIA Broadcast看起来效果还不错。</p><h2 id="安装NVIDIA-Bordcast"><a href="#安装NVIDIA-Bordcast" class="headerlink" title="安装NVIDIA Bordcast"></a>安装NVIDIA Bordcast</h2><p>到官网上找了一个安装上。<br><img src="https://blackme.oss-cn-shanghai.aliyuncs.com/blog/step2.PNG" alt="step2.png"><br><strong>设置步骤</strong></p><ul><li>打开NVIDIA Bordcast，切换到【麦克风】设置选项卡</li><li>效果【噪音消除】开启</li><li>点击右侧【●】录制按钮，建议不少于10秒</li><li>点击播放按钮，试听底噪消除效果</li><li>调节强度</li><li>重复录制，播放至满意的效果</li></ul><h2 id="录屏软件设置"><a href="#录屏软件设置" class="headerlink" title="录屏软件设置"></a>录屏软件设置</h2><p>由于大部分录屏软件都收费，而且有的还不支持设置音源输入选择，我找到了一款开源录屏软件Capture，它满足我的需要。<br>只要在音频设置-麦克风下拉中选择NVIDIA Bordcast就可以开始录制了<br><img src="https://blackme.oss-cn-shanghai.aliyuncs.com/blog/step3.PNG" alt="step3.png"><br><img src="https://blackme.oss-cn-shanghai.aliyuncs.com/blog/step4.PNG" alt="step4.png"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>在录屏之前必须要保证NVIDIA Bordcast处于打开状态，否则麦克风列表里不会出现NVIDIA Bordcast</li><li>NVIDIA Bordcast关闭后，相应的录音设备也会从麦克风列表里消失</li></ul><h2 id="有点问题"><a href="#有点问题" class="headerlink" title="有点问题"></a>有点问题</h2><p>这个NVIDIA Bordcast可以消除大部分底噪，但录音的音量会一开始小后面就会大很多，底噪也会上升一点，但是能凑合用了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript实用代码片段</title>
    <link href="/2021/04/30/%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/04/30/%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="替换正则表达是最后一个命中项"><a href="#替换正则表达是最后一个命中项" class="headerlink" title="替换正则表达是最后一个命中项"></a>替换正则表达是最后一个命中项</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 正则表达时，贪婪模式，.*会一直匹配到最后一个</span><br>str.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/(.*)and/</span>, <span class="hljs-string">&#x27;$1but&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="HTML混合内容转换成纯文本"><a href="#HTML混合内容转换成纯文本" class="headerlink" title="HTML混合内容转换成纯文本"></a>HTML混合内容转换成纯文本</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">delHtmlTag</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">return</span> str.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/&lt;[^&gt;]+&gt;/g</span>, <span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//去掉所有的html标记</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>配置node开发环境</title>
    <link href="/2021/04/30/%E9%85%8D%E7%BD%AEnode%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/04/30/%E9%85%8D%E7%BD%AEnode%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="场景简介"><a href="#场景简介" class="headerlink" title="场景简介"></a>场景简介</h1><p>手上有一个正在开发的NodeJS项目，由于编码使用的是ES Module模块化规范，所有需要使用babel来编译并调试。<br>开发环境需求有以下几点</p><ul><li>使用Visual Studio Code作为开发IDE</li><li>支持ES Module模块化规范</li><li>支持以调试的方式启动</li><li>支持npm方式启动</li><li>支持文件变更，自动重启<br>假设项目目录结构如下<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada">.<br>|<span class="hljs-comment">-- app.js // 程序入口文件</span><br>|<span class="hljs-comment">-- .babelrc // babel配置</span><br>|<span class="hljs-comment">-- node_modules</span><br>|<span class="hljs-comment">-- nodemon.json // nodemon配置</span><br>|<span class="hljs-comment">-- package.json</span><br>`<span class="hljs-comment">-- .vscode</span><br>|   `<span class="hljs-comment">-- launch.json</span><br>`<span class="hljs-comment">-- package-lock.json</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="用到的工具"><a href="#用到的工具" class="headerlink" title="用到的工具"></a>用到的工具</h1><ul><li>babel 用来编译ES代码（Babel 7版本）</li><li>babel-node 这个是@bable&#x2F;cli（Babel6 cli提供者是babel-cli）提供的命令行工具，可以编译并运行es代码</li><li>nodemon 这个可以以指定配置监听项目文件变化，并重启</li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>工具可以全局安装或者项目本地安装</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">// CLI工具</span><br>&gt; npm i @babel/cli nodemon -g<br><span class="hljs-comment">// 开发依赖</span><br>&gt; npm i @babel/core @babel/node @babel/preset-<span class="hljs-keyword">env</span> -D<br></code></pre></td></tr></table></figure><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><h3 id="配置babel"><a href="#配置babel" class="headerlink" title="配置babel"></a>配置babel</h3><p>因为要使用到ES Module，所以需要配置babel。在项目根目录新建<code>.bablerc</code>，并配置如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;presets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;@babel/preset-env&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;sourceMaps&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inline&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;retainLines&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在package.json 中配置启动命令如下。如此就可以运行<code>npm start</code>来编译并启动<code>app.js</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;babel-node ./app.js&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="配置nodemon"><a href="#配置nodemon" class="headerlink" title="配置nodemon"></a>配置nodemon</h3><p>由于<a href="https://www.npmjs.com/package/nodemon">nodemon</a>的<a href="https://github.com/remy/nodemon/blob/master/README.md">命令行参数</a>比较多不易管理，所以采用<a href="https://github.com/remy/nodemon/blob/master/doc/sample-nodemon.md">配置文件</a>的方式来配置nodemon。在项目根目录下新建<code>nodemon.json</code>,并填写配置如下，<strong>记得清除注释</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// nomon启动/重启时，打印日志</span><br>    <span class="hljs-attr">&quot;verbose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-comment">// 如果开发的项目不是js项目，这个配置项会很有用</span><br>    <span class="hljs-comment">// &quot;execMap&quot;: &#123;</span><br>    <span class="hljs-comment">//     &quot;&quot;: &quot;node&quot;,</span><br>    <span class="hljs-comment">//     &quot;js&quot;: &quot;babel-node&quot;</span><br>    <span class="hljs-comment">// &#125;,</span><br>    <span class="hljs-comment">// 忽略监听的目录</span><br>    <span class="hljs-attr">&quot;ignore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;*.test.js&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;fixtures/*&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;node_modules/**/node_modules&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 监听目录</span><br>    <span class="hljs-attr">&quot;watch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;Views&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 设置环境变量</span><br>    <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;NODE_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;development&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 支持生命周期事件，比如重启后并执行命令</span><br>    <span class="hljs-comment">// &quot;events&quot;: &#123;</span><br>    <span class="hljs-comment">//     &quot;restart&quot;: &quot;echo \&quot; ------------- \&quot;&quot;</span><br>    <span class="hljs-comment">// &#125;,</span><br><br>    <span class="hljs-comment">// 要监听的文件后缀</span><br>    <span class="hljs-attr">&quot;ext&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;js,json,html,css&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在package.json 中配置启动命令如下。如此就可以启动<code>app.js</code>，并自动重启。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nodemon --exec babel-node app.js --config nodemon.json&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="配置debug"><a href="#配置debug" class="headerlink" title="配置debug"></a>配置debug</h3><p>调试功能是跟IDE相关的。使用Visual Studio Code的话：</p><ul><li>首先从菜单命令<code>运行</code>–<code>打开配置</code>–选中<code>nodejs</code>来新建调试配置文件。<br>如果一切顺利的话，这个操作之后会在项目根目录下出现<code>.vscode</code>目录及其中包含的<code>launch.json</code>。</li><li>接着从菜单命令<code>运行</code>–<code>添加配置</code>–选中<code>通过npm启动</code>来调整调试配置。</li><li>修改<code>launch.json</code>文件内容如下。</li></ul><p>关于更多的调试配置可以参考<a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging">官方文档</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-comment">// 支持自动刷新的调试</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;使用npm启动&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;runtimeExecutable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;console&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integratedTerminal&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;runtimeArgs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;run-script&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;dev&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skipFiles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;&lt;node_internals&gt;/**&quot;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 不自动刷新的配置</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pwa-node&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;使用babel-node启动&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skipFiles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;&lt;node_internals&gt;/**&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;runtimeExecutable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceRoot&#125;/node_modules/.bin/babel-node&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceRoot&#125;/app.js&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>接下来就可以在开发中打断点了，Visual Studio Code断点调试能够在运行时显示断点处的上下文中变量的诸多信息，这让开发者很方便地诊断出程序的错误原因。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这里只是记录下配置过程中的关键步骤和配置信息，由于具体的宿主环境不一致，使用上文中的配置出现一些问题都是很有可能的。</p><h2 id="错误1：启动调试报错"><a href="#错误1：启动调试报错" class="headerlink" title="错误1：启动调试报错"></a>错误1：启动调试报错</h2><p>错误信息：Can’t find Node.js binary “node”: &#x2F;usr&#x2F;bin&#x2F;env: node: No such file or directory<br>解决方法：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">// 查找<span class="hljs-keyword">node</span><span class="hljs-title">所在目录</span><br><span class="hljs-title">&gt; which</span> <span class="hljs-keyword">node</span><br><br><span class="hljs-title">// 建立软链</span><br><span class="hljs-title">&gt; ln</span> -s /path/to/<span class="hljs-keyword">node</span> <span class="hljs-title">/usr</span>/local/bin/<span class="hljs-keyword">node</span><br><span class="hljs-title">// 注意替换 /path</span>/to/<span class="hljs-keyword">node</span><span class="hljs-title"></span><br></code></pre></td></tr></table></figure><p>npm启动方式也肯能会遇到以上错误，处理方法类似的</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>想法</title>
    <link href="/2021/04/30/%E6%83%B3%E6%B3%95/"/>
    <url>/2021/04/30/%E6%83%B3%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="博客工具客户端"><a href="#博客工具客户端" class="headerlink" title="博客工具客户端"></a>博客工具客户端</h1><p>博客工具的基本功能是能够以目录结构的方式组织笔记markdown文件。<br>其他扩展功能<br><strong>编辑</strong></p><ul><li>能够支持富文本编辑</li><li>能够支持编辑markdown</li><li>编辑markdown同时，支持markdown预览<br><strong>笔记文件及其结构存储方式</strong><br>文章以平铺形式存储在一个固定目录，并将其分类结构信息持久化（json&#x2F;DB）。<br>文章的标题默认为第一个标点&#x2F;换行符之前的文字</li></ul><p><strong>预览功能</strong><br>支持将文档编译称html站点并支持预览</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于with</title>
    <link href="/2021/04/30/with/"/>
    <url>/2021/04/30/with/</url>
    
    <content type="html"><![CDATA[<p> 为什么说with的作用与在生成的模板编译函数所起到的作用很契合</p><ul><li>with 与 LHS</li><li>with 在模板编译函数中的作用</li><li>with 在这种场景下不会造成额外的副作用。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>谷歌浏览器启动参数</title>
    <link href="/2021/04/30/%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0/"/>
    <url>/2021/04/30/%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="chrome启动参数"><a href="#chrome启动参数" class="headerlink" title="chrome启动参数"></a>chrome启动参数</h1><p><strong>chrome禁止本地浏览时加载本地其他文件，可以采用添加启动参数的方式来支持</strong><br>添加参数为 –allow-file-access-from-files  或者　–disable-web-security</p><p>Google Chrome 浏览器默认安装路径是 %USERPROFILE%\AppData\Local\Google\Chrome，其中User Data文件夹存放cache、cookie、历史记录等。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>–user-data-dir&#x3D;”[PATH]”</td><td>自定义用户数据目录</td></tr><tr><td>–start-maximized</td><td>启动就最大化</td></tr><tr><td>–no-sandbox</td><td>取消沙盒模式</td></tr><tr><td>–single-process</td><td>单进程运行</td></tr><tr><td>–process-per-tab</td><td>每个标签使用单独进程</td></tr><tr><td>–process-per-site</td><td>每个站点使用单独进程</td></tr><tr><td>–in-process-plugins</td><td>插件不启用单独进程</td></tr><tr><td>–disable-popup-blocking</td><td>禁用弹出拦截</td></tr><tr><td>–disable-javascript</td><td>禁用JavaScript</td></tr><tr><td>–disable-java</td><td>禁用Java</td></tr><tr><td>–disable-plugins</td><td>禁用插件</td></tr><tr><td>–disable-images</td><td>禁用图像</td></tr><tr><td>-incognito</td><td>启动进入隐身模式</td></tr><tr><td>–enable-udd-profiles</td><td>启用账户切换菜单</td></tr><tr><td>–proxy-pac-url</td><td>使用pac代理 [via 1&#x2F;2]</td></tr><tr><td>–lang&#x3D;zh-CN</td><td>设置语言为简体中文</td></tr><tr><td>–disk-cache-dir&#x3D;”[PATH]”</td><td>自定义缓存目录</td></tr><tr><td>–disk-cache-size&#x3D;</td><td>自定义缓存最大值（单位byte）</td></tr><tr><td>–media-cache-size&#x3D;</td><td>自定义多媒体缓存最大值（单位byte）</td></tr><tr><td>–bookmark-menu</td><td>在工具栏增加一个书签按钮</td></tr><tr><td>–enable-sync</td><td>启用书签同步</td></tr></tbody></table><p>将参数加在Chrome快捷方式的后面，加一个空格。像这样：C:\Users\zh\AppData\Local\Google\Chrome\Application\chrome.exe –user-data-dir&#x3D;”D:\Chrome”<br>只有在加参数的快捷方式上启动Chrome，参数才起作用，外部调用chrome参数不起作用。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>白嫖亚马逊云服务器</title>
    <link href="/2021/04/06/%E7%99%BD%E5%AB%96%E4%BA%9A%E9%A9%AC%E9%80%8A%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/04/06/%E7%99%BD%E5%AB%96%E4%BA%9A%E9%A9%AC%E9%80%8A%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="白嫖亚马逊云服务器"><a href="#白嫖亚马逊云服务器" class="headerlink" title="白嫖亚马逊云服务器"></a>白嫖亚马逊云服务器</h1><p>今天来分享一下如何白嫖亚马逊云服务器</p><p>国内服务器厂商BAT后两家的服务器，最便宜的也是500左右一年，3年5折900多块虽然便宜一点，但看起来也是一笔巨款花销。亚马逊云AWS为了吸引客户，免费1年体验一直就在那，看见AWS官网绚丽的免费宣传广告<code>就下面图里面的蓝字</code>，就问你心动不心动？<br><img src="https://img4.ink-lotus.ink/blogStep20.png"></p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>没错，这个白嫖也是有前提条件的</p><ul><li>由于亚马逊云AWS是国外厂商，虽然也有国内站点，但是访问速度可能不是很理想。你可能需要科学上网才能快速访问。</li><li>你得有一个亚马逊云的账号，不知道怎么注册的话google吧。</li><li>体验过其他免费蛋糕的，不确定可以白嫖</li></ul><p><strong>几个连接</strong></p><ul><li><a href="https://aws.amazon.com/cn/free/?sc_icampaign=acq_aws_takeover-1st-visit-free-tier&sc_ichannel=ha&sc_icontent=awssm-evergreen-1st-visit&sc_iplace=hero&trk=ha_awssm-evergreen-1st-visit&all-free-tier.sort-by=item.additionalFields.SortRank&all-free-tier.sort-order=asc">注册AWS</a></li><li><a href="https://us-east-2.console.aws.amazon.com/console/home?region=us-east-2">AWS控制台</a></li><li><a href="https://us-east-2.console.aws.amazon.com/ec2/v2/home?region=us-east-2#Home:">AWS虚拟服务器列表</a></li></ul><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>顺利得到账号后就可以开始创建服务器了</p><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>打开虚拟控制台，点击图中<code>启动虚拟机</code>，开始创建流程<br><img src="https://img4.ink-lotus.ink/blogStep23.png"></p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>下面就是创建页面的第一步</p><ul><li>在搜索框中输入<code>centos</code></li><li>点击<code>社区AMI</code></li><li>选择一个你中意的<code>Cent OS</code>版本</li><li>点击下一步<br><img src="https://img4.ink-lotus.ink/blogStep01.png"></li></ul><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><ul><li>这里要选一个<strong>免费的实例配置</strong><br>下一步<br><img src="https://img4.ink-lotus.ink/blogStep02.png"></li></ul><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><p>无需多说，下一步<br><img src="https://img4.ink-lotus.ink/blogStep03.png"></p><h3 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h3><p>无需多说，下一步<br><img src="https://img4.ink-lotus.ink/blog/Step04.png"></p><h3 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h3><p>无需多说，下一步<br><img src="https://img4.ink-lotus.ink/blog/Step05.png"></p><h3 id="Step-7"><a href="#Step-7" class="headerlink" title="Step 7"></a>Step 7</h3><ul><li>这里注意，如果没有你需要的端口要手动添加</li><li>比如<code>22</code>端口，windows的话<code>3389</code>端口<br>这一步如果端口忘记设置的话，会连不上服务器。<br>设置好了就点击<code>审核和启动</code><br><img src="https://img4.ink-lotus.ink/blog/Step06.png"></li></ul><h3 id="Step-8"><a href="#Step-8" class="headerlink" title="Step 8"></a>Step 8</h3><p>这里是创建的最后一步了，可以点击顶部的步骤返回去修改参数设置。确认无误的话，就<code>启动</code>吧。<br><img src="https://img4.ink-lotus.ink/blog/Step08.png"></p><h3 id="Step-9"><a href="#Step-9" class="headerlink" title="Step 9"></a>Step 9</h3><p>这里会弹出一个设置<code>密钥对</code>的对话框，后面登录服务器就靠它了</p><ul><li>第一项下拉选择<code>创建新的密钥对</code></li><li>第二项输入便于识别的<code>密钥对文件名称</code>，特别是当你的下载目录文件很多的时候，方便找😂<br><img src="https://img4.ink-lotus.ink/blog/Step10.png"></li></ul><h3 id="Step-10"><a href="#Step-10" class="headerlink" title="Step 10"></a>Step 10</h3><p>到这里等待启动就行了，过程应该3到5分钟<br><img src="https://img4.ink-lotus.ink/blog/Step12.png"></p><h2 id="设置虚拟机"><a href="#设置虚拟机" class="headerlink" title="设置虚拟机"></a>设置虚拟机</h2><p>点击<code>Step 10</code>图片中的<code>服务器id</code>，或者从上面提供的服务器列表连接进入你的服务器设置&#x2F;详情页面，开始连接并设置服务器。</p><h3 id="Step-1-1"><a href="#Step-1-1" class="headerlink" title="Step 1"></a>Step 1</h3><ul><li>点击服务器概要标题右侧的<code>连接</code>按钮<br><img src="https://img4.ink-lotus.ink/blog/Step15.png"></li></ul><h3 id="Step-2-1"><a href="#Step-2-1" class="headerlink" title="Step 2"></a>Step 2</h3><p>连接页面，这里有几种连接方式，第三种是我熟悉的😂，前面2中还需要再研究</p><ul><li>点击下面的<code>SSH客户端</code>标签页</li><li>复制第4步下面的<code>示例命令</code><br><img src="https://img4.ink-lotus.ink/blog/Step18.png"></li></ul><h3 id="Step-3-1"><a href="#Step-3-1" class="headerlink" title="Step 3"></a>Step 3</h3><ul><li>掏出你惯用的命令行工具，这里我用<code>Git Bash</code>演示。</li><li>转到启动之前<code>下载的pem文件</code>所在的目录</li><li>粘贴命令，回车<blockquote><p>登录过程中有一次询问<br>老师说过的，第一次登录会提示天价known hosts，选<code>yes</code>，回车</p></blockquote><img src="https://img4.ink-lotus.ink/blog/Step19.png"></li></ul><h3 id="Step-4-1"><a href="#Step-4-1" class="headerlink" title="Step 4"></a>Step 4</h3><p>看到控制台在<code>$</code>后面闪烁的光标的话，Congratulations ！<br>登录成功</p><h3 id="Step-5-1"><a href="#Step-5-1" class="headerlink" title="Step 5"></a>Step 5</h3><p>每次登录都依赖于pem文件，对于学习来说，不免过于麻烦。<br>接下来开启密码登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ssh"># 下面这行命令是强制设置用户`centos`的密码<br>&gt; sudo passwd centos<br>Changing password for user root.<br>New password:              #输入密码第一次<br>Retype new password:       #输入密码第二次<br>passwd: all authentication tokens updated successfully.<br><br># 用vi编辑器修改登录配置文件，关键配置如下<br># 使用↑↓←→导航光标<br># 按 字母 i进入插入模式<br># 按ESC，输入:wq，保存退出<br><br>&gt; vi /etc/ssh/sshd_config<br>...<br>PasswordAuthentication yes #允许使用密码登陆，由no改成yes<br>PermitRootLogin yes        #如果需要使用root登陆，由no改成yes，如果不需要就不要动<br>... <br><br># 重启机器<br>&gt; reboot<br></code></pre></td></tr></table></figure><h3 id="Step-6-1"><a href="#Step-6-1" class="headerlink" title="Step 6"></a>Step 6</h3><p>使用密码登录，<br>小福利🍖，共享下我的机器<br>Host： 18.224.169.181<br>Password： zxd1100..</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&gt; ssh centos@<span class="hljs-number">18.224</span><span class="hljs-number">.169</span><span class="hljs-number">.181</span><br>centos@<span class="hljs-number">18.224</span><span class="hljs-number">.169</span><span class="hljs-number">.181</span>&#x27;s password:    <span class="hljs-comment"># 输入密码</span><br>Activate <span class="hljs-keyword">the</span> web console <span class="hljs-keyword">with</span>: systemctl enable <span class="hljs-comment">--now cockpit.socket</span><br><br>Last failed login: Tue Jan  <span class="hljs-number">5</span> <span class="hljs-number">18</span>:<span class="hljs-number">31</span>:<span class="hljs-number">05</span> UTC <span class="hljs-number">2021</span> <span class="hljs-keyword">from</span> <span class="hljs-number">101.86</span><span class="hljs-number">.228</span><span class="hljs-number">.42</span> <span class="hljs-keyword">on</span> ssh:notty<br>There were <span class="hljs-number">2</span> failed login attempts <span class="hljs-keyword">since</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">last</span> successful login.<br>Last login: Tue Jan  <span class="hljs-number">5</span> <span class="hljs-number">18</span>:<span class="hljs-number">21</span>:<span class="hljs-number">45</span> <span class="hljs-number">2021</span> <span class="hljs-keyword">from</span> <span class="hljs-number">101.86</span><span class="hljs-number">.228</span><span class="hljs-number">.42</span><br></code></pre></td></tr></table></figure><h3 id="开始愉快的学习吧"><a href="#开始愉快的学习吧" class="headerlink" title="开始愉快的学习吧"></a>开始愉快的学习吧</h3><p>嗯，也可能不愉快，如果命令行工具卡住了，有可能是网络问题。</p><p>———————All End——————–</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>白嫖亚马逊云服务器</title>
    <link href="/2021/04/06/%E9%83%A8%E7%BD%B2Nodejs%E6%9C%8D%E5%8A%A1/"/>
    <url>/2021/04/06/%E9%83%A8%E7%BD%B2Nodejs%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="上线一个nodejs项目的流程"><a href="#上线一个nodejs项目的流程" class="headerlink" title="上线一个nodejs项目的流程"></a>上线一个nodejs项目的流程</h1><ul><li>在本地测试好nodejs项目</li><li>代码上传服务器</li><li>申请域名证书</li><li>pm2 启动</li></ul><h1 id="本地项目实例代码"><a href="#本地项目实例代码" class="headerlink" title="本地项目实例代码"></a>本地项目实例代码</h1><p>以<code>express</code>为例， 以下index代码包含一个静态服务器的几项功能</p><ul><li>静态文件服务，public目录下的文件可以被访问</li><li>模板，支持swig模板</li><li>支持http&#x2F;https访问<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> swig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;swig&#x27;</span>);<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">// 利用express.static中间件来托管静态资源。</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)));<br><br><span class="hljs-comment">// ----------------- 模板引擎 -------------------------</span><br><span class="hljs-comment">//使用swig渲染html文件</span><br>app.<span class="hljs-title function_">engine</span>(<span class="hljs-string">&#x27;html&#x27;</span>, swig.<span class="hljs-property">renderFile</span>);<br><br><span class="hljs-comment">//设置默认页面扩展名</span><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;html&#x27;</span>);<br><br><span class="hljs-comment">//设置模板编译无缓存</span><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view cache&#x27;</span>, <span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">//设置项目的页面文件，也就是html文件的位置</span><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;views&#x27;</span>));<br><br>swig.<span class="hljs-title function_">setDefaults</span>(&#123;<br>    <span class="hljs-comment">//关闭swig模板缓存</span><br>    <span class="hljs-attr">cache</span>: <span class="hljs-string">&#x27;memory&#x27;</span>,<br><br>    <span class="hljs-comment">//从文件载入模板，请写绝对路径，不要使用相对路径</span><br>    <span class="hljs-attr">loader</span>: swig.<span class="hljs-property">loaders</span>.<span class="hljs-title function_">fs</span>(__dirname + <span class="hljs-string">&#x27;/views&#x27;</span>)<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>);<br>&#125;)<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/p2&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;p2&#x27;</span>);<br>&#125;)<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">8888</span>;<br><br>app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`start: http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>/`</span>)<br>&#125;) <br><br></code></pre></td></tr></table></figure></li></ul><h1 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h1><p>代码上传路径： <code>/usr/local/src/website/app</code></p><h1 id="pm2-启动项目"><a href="#pm2-启动项目" class="headerlink" title="pm2 启动项目"></a>pm2 启动项目</h1><p>pm2 基本使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">转到项目根目录下</span><br>cd /usr/local/src/website/app<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动项目几种方式</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">直接启动</span><br>pm2 start index.js<br><span class="hljs-meta prompt_"># </span><span class="language-bash">监听启动</span><br>pm2 start index.js --watch<br><span class="hljs-meta prompt_"># </span><span class="language-bash">多线程启动</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-i 线程数，max为最大</span><br>pm2 start index.js --watch -i max<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看项目状态</span><br>pm2 list<br>┌─────┬──────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐<br>│ id  │ name     │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │<br>├─────┼──────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤<br>│ 0   │ index    │ default     │ 1.0.0   │ fork    │ 16884    │ 46m    │ 22   │ online    │ 0%       │ 42.9mb   │ root     │ disabled │<br>└─────┴──────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止项目</span><br>pm2 stop index.js<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启项目</span><br>pm2 restart index.js<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除项目</span><br>pm2 delete 0<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">全局安装</span><br>npm i pm2 -g<br><br></code></pre></td></tr></table></figure><h1 id="acme-申请Let’s-Encrypt免费证书"><a href="#acme-申请Let’s-Encrypt免费证书" class="headerlink" title="acme 申请Let’s Encrypt免费证书"></a>acme 申请Let’s Encrypt免费证书</h1><p>以 <code>example.com</code> 域名为例，申请通配符证书。在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装acme客户端</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">email 换成自己的邮箱</span><br>curl https://get.acme.sh | sh -s email=my@example.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成证书</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-d 参数为 二级域名/三级域名</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--webroot 为站点静态服务根目录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">acme客户端在申请证书的过程中会动态创建用于验证的文件，并在申请证书结束后删除</span><br>acme.sh --issue -d example.com -d www.example.com --webroot /usr/local/src/website/app/puclic<br><br>[Wed Oct 12 02:25:58 EDT 2022] Using CA: https://acme.zerossl.com/v2/DV90<br>[Wed Oct 12 02:25:58 EDT 2022] Multi domain=&#x27;DNS:jpfinance.vip,DNS:www.jpfinance.vip&#x27;<br>[Wed Oct 12 02:25:58 EDT 2022] Getting domain auth token for each domain<br>[Wed Oct 12 02:26:06 EDT 2022] Getting webroot for domain=&#x27;jpfinance.vip&#x27;<br>[Wed Oct 12 02:26:06 EDT 2022] Getting webroot for domain=&#x27;www.jpfinance.vip&#x27;<br>[Wed Oct 12 02:26:06 EDT 2022] Verifying: jpfinance.vip<br>[Wed Oct 12 02:26:10 EDT 2022] Processing, The CA is processing your order, please just wait. (1/30)<br>[Wed Oct 12 02:26:17 EDT 2022] Success<br>[Wed Oct 12 02:26:17 EDT 2022] Verifying: www.jpfinance.vip<br>[Wed Oct 12 02:26:21 EDT 2022] Processing, The CA is processing your order, please just wait. (1/30)<br>[Wed Oct 12 02:26:25 EDT 2022] Processing, The CA is processing your order, please just wait. (2/30)<br>[Wed Oct 12 02:26:30 EDT 2022] Processing, The CA is processing your order, please just wait. (3/30)<br>[Wed Oct 12 02:26:35 EDT 2022] Success<br>[Wed Oct 12 02:26:35 EDT 2022] Verify finished, start to sign.<br>[Wed Oct 12 02:26:35 EDT 2022] Lets finalize the order.<br>[Wed Oct 12 02:26:35 EDT 2022] Le_OrderFinalize=&#x27;https://acme.zerossl.com/v2/DV90/order/_33Hij4Qf6fFsvhQLjjQ_g/finalize&#x27;<br>[Wed Oct 12 02:26:37 EDT 2022] Order status is processing, lets sleep and retry.<br>[Wed Oct 12 02:26:37 EDT 2022] Retry after: 15<br>[Wed Oct 12 02:26:53 EDT 2022] Polling order status: https://acme.zerossl.com/v2/DV90/order/_33Hij4Qf6fFsvhQLjjQ_g<br>[Wed Oct 12 02:26:55 EDT 2022] Downloading cert.<br>[Wed Oct 12 02:26:55 EDT 2022] Le_LinkCert=&#x27;https://acme.zerossl.com/v2/DV90/cert/dUv6k0tSCC4ONCslRI5QEw&#x27;<br>[Wed Oct 12 02:26:56 EDT 2022] Cert success.<br>-----BEGIN CERTIFICATE-----<br>MIIGfDCCBGSgAwIBAgIRAIP+hbhLSgKwKWRR+p0F5gEwDQYJKoZIhvcNAQEMBQAw<br>SzELMAkGA1UEBhMCQVQxEDAOBgNVBAoTB1plcm9TU0wxKjAoBgNVBAMTIVplcm9T<br>U0wgUlNBIERvbWFpbiBTZWN1cmUgU2l0ZSBDQTAeFw0yMjEwMTIwMDAwMDBaFw0y<br>MzAxMTAyMzU5NTlaMBgxFjAUBgNVBAMTDWpwZmluYW5jZS52aXAwggEiMA0GCSqG<br>SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDd714oy696nHRhz0qQnnBbuxcBIVHVawjm<br>jRLxpmwEoFKl2CaVpXDmAfSwMMagLslK9KpZtkZPu/aGcOdoGRHVTIIl2CPZBoNe<br>e+tZl1wK6P/ibXtlxR7cYASZd52Hj5C883mspj8baoC/wIlV69o2f1HPhYwQSFIE<br>QZqikBtYNkJn+E/GLgfe+3FPs7zAKTPauL0EwnCg0zLsHC+ok0ToElSyqDUrIXau<br>X7qdouKWor5B2Z8+nTH3rRVgAUOmrIelgarnnm9vf6OCzG85Z1nHXR6+aQf90uHC<br>M6J/OXyGsZUnRRfP4bhNlO9nlEuZkk28FXm+d04MMyB4kMjffQtHAgMBAAGjggKM<br>MIICiDAfBgNVHSMEGDAWgBTI2XhootkZaNU9ct5fCj7ctYaGpjAdBgNVHQ4EFgQU<br>fjGu2rUIfeQH+5Ok5TYA18UfMA0wDgYDVR0PAQH/BAQDAgWgMAwGA1UdEwEB/wQC<br>MAAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMEkGA1UdIARCMEAwNAYL<br>KwYBBAGyMQECAk4wJTAjBggrBgEFBQcCARYXaHR0cHM6Ly9zZWN0aWdvLmNvbS9D<br>UFMwCAYGZ4EMAQIBMIGIBggrBgEFBQcBAQR8MHowSwYIKwYBBQUHMAKGP2h0dHA6<br>Ly96ZXJvc3NsLmNydC5zZWN0aWdvLmNvbS9aZXJvU1NMUlNBRG9tYWluU2VjdXJl<br>U2l0ZUNBLmNydDArBggrBgEFBQcwAYYfaHR0cDovL3plcm9zc2wub2NzcC5zZWN0<br>aWdvLmNvbTCCAQQGCisGAQQB1nkCBAIEgfUEgfIA8AB2AK33vvp8/xDIi509nB4+<br>GGq0Zyldz7EMJMqFhjTr3IKKAAABg8rfrccAAAQDAEcwRQIhAPdvrEdlpr1wCe5H<br>kp/9CciYTo9FJjHIh//mNB8JJz14AiBZV6BDSUbq3B9JK/Y+bIThpK5z5StPq9oF<br>5rz2oZdRYwB2AHoyjFTYty22IOo44FIe6YQWcDIThU070ivBOlejUutSAAABg8rf<br>ragAAAQDAEcwRQIhAL5DUGT7knMNyzDHYzKbO4e1Y99dGFJ0HCRnaUpzyGZ1AiB9<br>pwC+ayvCuGO8CSQDesNse40Wx1deUhlU+t+X/1KekzArBgNVHREEJDAigg1qcGZp<br>bmFuY2UudmlwghF3d3cuanBmaW5hbmNlLnZpcDANBgkqhkiG9w0BAQwFAAOCAgEA<br>BK3epIjHwOGNL72Umj1tfVxB8L18KPVD7sT+pOewF+B9JP7Tr3Q8uZ1SxjVsUrS4<br>Wuz3GrEehNLXVft1xR+qW3P8SPhRFi/tb38Vsny4DhGBFp0SMq+G89+fRwkBtPuK<br>B0zr0zW/pe+8a6K1ajOecodpzqC8YFHKVAqkoJPo3RlinfLO84ry4gXaT2ek9KQr<br>8+uswxgbbfnRObLjTN3rP2VBRUJB+dT3r1Z3F4Ilvg+xZ4Oclj3JJHlmss3JV/Oo<br>XMxmpSlk5AjUYhsk6UYOcPjDQorDSM7JnL0M2rE1EKCyFnJR1hx8OJeCPLkEg1cx<br>8TnL4qIKSG6SgUeFZAg8beuhVqJGca0n0Z9bM0e2yIQYAeBsCmuYTeTuIh59cP41<br>5B657vfIMM11IDgMe5udUnAt9pzCgE3UkYHQwPzmApifj0vB3dLuRNUztGB6pWiu<br>DQ7auOd55bOtFxVUAkYkxF/pAAF2qruOeulmwcM1zopFztmBOSPtop2WAbBAZCn2<br>DV4aKXG/pdCuvrnpFeYUcTXRObfr2QJuObey6k/XbIRLBy6grvYOe3UCtq+P6tSA<br>k3PQmhbkh19RrYh9WRHVM283d0gbJpzEyTmk2W03MpbVMhbIa8Xdzt1oQ0XFu1kL<br>UzzBHRqg93mixLLhAbP3JMN5J0xoY24c9Aq3zNgdg1w=<br>-----END CERTIFICATE-----<br>[Wed Oct 12 02:26:56 EDT 2022] Your cert is in: /root/.acme.sh/jpfinance.vip/jpfinance.vip.cer<br>[Wed Oct 12 02:26:56 EDT 2022] Your cert key is in: /root/.acme.sh/jpfinance.vip/jpfinance.vip.key<br>[Wed Oct 12 02:26:56 EDT 2022] The intermediate CA cert is in: /root/.acme.sh/jpfinance.vip/ca.cer<br>[Wed Oct 12 02:26:56 EDT 2022] And the full chain certs is there: /root/.acme.sh/jpfinance.vip/fullchain.cer<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装证书</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-d 为 域名</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--key-file key文件安装路径</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--fullchain-file 证书文件安装路径.windows 用crt证书，linux用pem cer证书</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--reloadcmd 证书更新后，重启服务命令。可选参数，也可为pm2 添加--watch参数</span><br>acme.sh --install-cert -d jpfinance.vip \<br>--key-file       /usr/local/src/website/app/cert/server.key  \<br>--fullchain-file /usr/local/src/website/app/cert/fullchain.cer<br>--reloadcmd     &quot;pm2 restart all&quot;<br></code></pre></td></tr></table></figure><p>参考 </p><ul><li><a href="https://blog.csdn.net/itworld123/article/details/115553346">网络安全 &#x2F; crt、pem、pfx、cer、key 作用及区别</a></li></ul><h1 id="启用https"><a href="#启用https" class="headerlink" title="启用https"></a>启用https</h1><p>修改js程序，添加以下代码。重启pm2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ............</span><br><span class="hljs-keyword">var</span> https = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;https&#x27;</span>);<br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-comment">//同步读取密钥和签名证书</span><br><span class="hljs-keyword">var</span> options = &#123;<br>    <span class="hljs-attr">key</span>:fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;./cert/server.key&#x27;</span>),<br>    <span class="hljs-attr">cert</span>:fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;./cert/server.cer&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// ............</span><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><br><br><br><span class="hljs-comment">// ............</span><br><span class="hljs-keyword">var</span> httpsServer = https.<span class="hljs-title function_">createServer</span>(options,app);<br><span class="hljs-keyword">var</span> httpServer = http.<span class="hljs-title function_">createServer</span>(app);<br><br><span class="hljs-keyword">const</span> httpPort = <span class="hljs-number">80</span>;<br><span class="hljs-keyword">const</span> httpsPort = <span class="hljs-number">443</span><br><br><br><span class="hljs-comment">//https监听端口</span><br>httpsServer.<span class="hljs-title function_">listen</span>(httpsPort,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`start: https://localhost:<span class="hljs-subst">$&#123;httpsPort&#125;</span>/`</span>) &#125;);<br><span class="hljs-comment">//http监听端口</span><br>httpServer.<span class="hljs-title function_">listen</span>(httpPort,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`start: http://localhost:<span class="hljs-subst">$&#123;httpPort&#125;</span>/`</span>) &#125;);<br></code></pre></td></tr></table></figure><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="站点无法访问的原因"><a href="#站点无法访问的原因" class="headerlink" title="站点无法访问的原因"></a>站点无法访问的原因</h2><h3 id="域名解析未生效"><a href="#域名解析未生效" class="headerlink" title="域名解析未生效"></a>域名解析未生效</h3><p>可以利用 <a href="https://ping.chinaz.com/">在线ping工具</a>查询站点解析是否正确，连通情况。如有解析不正确，需要登录域名管理后台修改dns解析记录。修改后的DNS解析记录不会立即生效，最迟48小时后才能在全球所有DNS服务器同步，所以期间某些地区无法访问站点是正常的。一般修改记录后1小时就可以再次使用在线ping工具验证。</p><h3 id="服务端口未开放"><a href="#服务端口未开放" class="headerlink" title="服务端口未开放"></a>服务端口未开放</h3><p>端口不同有2种情况。服务器提供商一般会有安全组设置，安全组中包含端口开发和关闭的规则。服务器本身也会运行防火墙软件，默认只会开启ssh端口。要保证安全组和防火墙软件同时开发目标端口，站点才能访问。<br>参考</p><ul><li>linux端口状态查询<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -tunlp<br>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    <br>tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      778/sshd            <br>tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      874/master          <br>tcp6       0      0 :::80                   :::*                    LISTEN      17653/node /usr/loc <br>tcp6       0      0 :::22                   :::*                    LISTEN      778/sshd            <br>tcp6       0      0 ::1:25                  :::*                    LISTEN      874/master          <br>tcp6       0      0 :::443                  :::*                    LISTEN      17653/node /usr/loc <br>udp        0      0 127.0.0.1:323           0.0.0.0:*                           450/chronyd         <br>udp6       0      0 ::1:323                 :::*                                450/chronyd  <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ss是新的netstat</span><br>ss -tunlp<br>Netid State     Recv-Q Send-Q   Local Address:Port  Peer Address:Port              <br>udp   UNCONN     0      0       127.0.0.1:323       *:*         users:((&quot;chronyd&quot;,pid=450,fd=5))<br>udp   UNCONN     0      0       [::1]:323           [::]:*      users:((&quot;chronyd&quot;,pid=450,fd=6))<br>tcp   LISTEN     0      128     *:22                *:*         users:((&quot;sshd&quot;,pid=778,fd=3))<br>tcp   LISTEN     0      100     127.0.0.1:25        *:*         users:((&quot;master&quot;,pid=874,fd=13))<br>tcp   LISTEN     0      128     [::]:80             [::]:*      users:((&quot;node /usr/local&quot;,pid=17653,fd=21))<br>tcp   LISTEN     0      128     [::]:22             [::]:*      users:((&quot;sshd&quot;,pid=778,fd=4))<br>tcp   LISTEN     0      100     [::1]:25            [::]:*      users:((&quot;master&quot;,pid=874,fd=14))<br>tcp   LISTEN     0      128     [::]:443            [::]:*      users:((&quot;node /usr/local&quot;,pid=17653,fd=20))<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">lsof -iTCP -sTCP:LISTEN仅显示TCP状态为LISTEN的socket文件</span><br>lsof -nP -iTCP -sTCP:LISTEN<br>COMMAND   PID     USER   FD   TYPE DEVICE SIZE/OFF NODE NAME<br>sshd      445     root    3u  IPv4  16434      0t0  TCP *:22 (LISTEN)<br>sshd      445     root    4u  IPv6  16445      0t0  TCP *:22 (LISTEN)<br>apache2   515     root    4u  IPv6  16590      0t0  TCP *:80 (LISTEN)<br>mysqld    534    mysql   30u  IPv6  17636      0t0  TCP *:3306 (LISTEN)<br>mysqld    534    mysql   33u  IPv6  19973      0t0  TCP *:33060 (LISTEN)<br>apache2   764 www-data    4u  IPv6  16590      0t0  TCP *:80 (LISTEN)<br>apache2   765 www-data    4u  IPv6  16590      0t0  TCP *:80 (LISTEN)<br>master    929     root   13u  IPv4  19637      0t0  TCP *:25 (LISTEN)<br></code></pre></td></tr></table></figure></li><li>开放linux服务器端口<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">firewall</span><br>firewall-cmd --zone=public --add-port=1935/tcp --permanent<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">iptables</span><br>/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT<br></code></pre></td></tr></table></figure>参考: <a href="https://www.cnblogs.com/sxmny/p/11224842.html">linux开放指定端口命令</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C# 代码片段</title>
    <link href="/2020/01/11/CSharp/"/>
    <url>/2020/01/11/CSharp/</url>
    
    <content type="html"><![CDATA[<h3 id="为Linq的Where增加重载以支持多个参数"><a href="#为Linq的Where增加重载以支持多个参数" class="headerlink" title="为Linq的Where增加重载以支持多个参数"></a>为Linq的Where增加重载以支持多个参数</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-comment">//定义扩展</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EX</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">Tsource</span>&gt; <span class="hljs-title">Where</span>&lt;<span class="hljs-title">Tsource</span>,<span class="hljs-title">T2</span>&gt;(<span class="hljs-params"><span class="hljs-keyword">this</span> IEnumerable&lt;Tsource&gt; items,Func&lt;Tsource, T2, <span class="hljs-built_in">bool</span>&gt; func, T2 temp</span>)</span><br>    &#123;<br>        List&lt;Tsource&gt; list = <span class="hljs-keyword">new</span> List&lt;Tsource&gt;();<br>        <span class="hljs-keyword">foreach</span> (Tsource item <span class="hljs-keyword">in</span> items)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (func(item, temp))<br>            &#123;<br>                list.Add(item);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//使用扩展</span><br> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>    &#123;<br>    List&lt;<span class="hljs-built_in">string</span>&gt; stringItems = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;&#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;马六&quot;</span>,<span class="hljs-string">&quot;王二麻子&quot;</span>,<span class="hljs-string">&quot;钱掌柜&quot;</span>,<span class="hljs-string">&quot;葫芦棍子&quot;</span>,<span class="hljs-string">&quot;屎蛋&quot;</span> &#125;;<br><br><span class="hljs-comment">//筛选名字长度</span><br>        <span class="hljs-built_in">int</span> limitLength = <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//定义筛选器</span><br>        Func&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>, <span class="hljs-built_in">bool</span>&gt; func = (origin, temp) =&gt; origin.Length &gt; temp;<br>        <span class="hljs-comment">//调用扩展</span><br>        List&lt;<span class="hljs-built_in">string</span>&gt; res = stringItems.MyWhere(func,limitLength);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> res)<br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;名字长度大于2的项目：&quot;</span> + item);<br>        &#125;<br><br>        Console.Read();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="操作系统中线程的数据结构包括的主要内容"><a href="#操作系统中线程的数据结构包括的主要内容" class="headerlink" title="操作系统中线程的数据结构包括的主要内容"></a>操作系统中线程的数据结构包括的主要内容</h3><ul><li>Thread内核数据结构，主要OSId（）线程的ID,Context上下文（存放了CPU寄存器相关的变量）</li></ul><h3 id="应用程序域"><a href="#应用程序域" class="headerlink" title="应用程序域"></a>应用程序域</h3><p>Application Domain 用于个里再同一个计算机上运行的不同程序</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Javascript文本HTML编码</title>
    <link href="/2020/01/11/Javascript%E6%96%87%E6%9C%ACHTML%E7%BC%96%E7%A0%81/"/>
    <url>/2020/01/11/Javascript%E6%96%87%E6%9C%ACHTML%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="对字符串进行HTML编码和解码的JavaScript函数"><a href="#对字符串进行HTML编码和解码的JavaScript函数" class="headerlink" title="对字符串进行HTML编码和解码的JavaScript函数"></a>对字符串进行HTML编码和解码的JavaScript函数</h1><h2 id="将字符串中HTML标签转换HTML编码（编码）"><a href="#将字符串中HTML标签转换HTML编码（编码）" class="headerlink" title="将字符串中HTML标签转换HTML编码（编码）"></a>将字符串中HTML标签转换HTML编码（编码）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">HtmlEncode</span>(<span class="hljs-params">str</span>) &#123; <br>    <span class="hljs-keyword">var</span> t = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>); <br>    t.<span class="hljs-property">textContent</span> ? t.<span class="hljs-property">textContent</span> = str : t.<span class="hljs-property">innerText</span> = str; <br>    <span class="hljs-keyword">return</span> t.<span class="hljs-property">innerHTML</span>; <br>&#125; <br></code></pre></td></tr></table></figure><p>如下HTML片段：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;txt&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>nihao<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>        nihao<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>经调用HtmlEncode函数得到的结果</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">&amp;<span class="hljs-literal">lt</span>;div class=<span class="hljs-string">&quot;txt&quot;</span>&amp;<span class="hljs-literal">gt</span>;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>p<span class="hljs-symbol">&amp;gt;</span>nihao<span class="hljs-symbol">&amp;lt;</span>/p<span class="hljs-symbol">&amp;gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>span<span class="hljs-symbol">&amp;gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>nihao</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>/span<span class="hljs-symbol">&amp;gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>/div<span class="hljs-symbol">&amp;gt;</span></span><br></code></pre></td></tr></table></figure><p>HTML片段中的空格会被保留，换行符会被替换成<code>&lt;br&gt;</code>标签</p><h2 id="将HTML编码转换成HTML代码片段（解码）"><a href="#将HTML编码转换成HTML代码片段（解码）" class="headerlink" title="将HTML编码转换成HTML代码片段（解码）"></a>将HTML编码转换成HTML代码片段（解码）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">HtmlDecode</span>(<span class="hljs-params">str</span>) &#123; <br>    <span class="hljs-keyword">var</span> t = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>); <br>    t.<span class="hljs-property">innerHTML</span> = str; <br>    <span class="hljs-keyword">return</span> t.<span class="hljs-property">innerText</span> || t.<span class="hljs-property">textContent</span> <br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL 代码片段</title>
    <link href="/2020/01/11/SQL/"/>
    <url>/2020/01/11/SQL/</url>
    
    <content type="html"><![CDATA[<h3 id="查询当前数据库表的所有字段"><a href="#查询当前数据库表的所有字段" class="headerlink" title="查询当前数据库表的所有字段"></a>查询当前数据库表的所有字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> t.name,c.name <span class="hljs-keyword">from</span> sysobjects t<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> syscolumns c <span class="hljs-keyword">on</span> c.id <span class="hljs-operator">=</span> t.id<br><span class="hljs-keyword">where</span> t.xtype <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;U&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Git Bash进行Git 操作</title>
    <link href="/2020/01/11/git/"/>
    <url>/2020/01/11/git/</url>
    
    <content type="html"><![CDATA[<h2 id="使用Git-Bash进行Git-操作"><a href="#使用Git-Bash进行Git-操作" class="headerlink" title="使用Git Bash进行Git 操作"></a>使用Git Bash进行Git 操作</h2><h3 id="查看当前文件副本状态"><a href="#查看当前文件副本状态" class="headerlink" title="查看当前文件副本状态"></a>查看当前文件副本状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git status<br>On branch develop<br>Your branch is up-to-date with <span class="hljs-string">&#x27;origin/develop&#x27;</span>.<br>Changes not staged <span class="hljs-keyword">for</span> commit:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)<br>  (use <span class="hljs-string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="hljs-keyword">in</span> working directory)<br><br>        modified:   test.txt<br><br>no changes added to commit (use <span class="hljs-string">&quot;git add&quot;</span> and/or <span class="hljs-string">&quot;git commit -a&quot;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="将文件添加至暂存区"><a href="#将文件添加至暂存区" class="headerlink" title="将文件添加至暂存区"></a>将文件添加至暂存区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git add test.txt<br><span class="hljs-comment"># 如果没有任何提示，当前命令操作成功</span><br></code></pre></td></tr></table></figure><h3 id="将文件从暂存区中移除"><a href="#将文件从暂存区中移除" class="headerlink" title="将文件从暂存区中移除"></a>将文件从暂存区中移除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git reset <span class="hljs-built_in">head</span> test.txt<br>Unstaged changes after reset:<br>M       test.txt<br></code></pre></td></tr></table></figure><h3 id="恢复文件至最近一个版本的状态，并放弃更改"><a href="#恢复文件至最近一个版本的状态，并放弃更改" class="headerlink" title="恢复文件至最近一个版本的状态，并放弃更改"></a>恢复文件至最近一个版本的状态，并放弃更改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git checkout test.txt<br></code></pre></td></tr></table></figure><h3 id="将暂存区文件提交至版本库"><a href="#将暂存区文件提交至版本库" class="headerlink" title="将暂存区文件提交至版本库"></a>将暂存区文件提交至版本库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git commit -m <span class="hljs-string">&#x27;修改test文件&#x27;</span><br>[develop 5902113] 修改<span class="hljs-built_in">test</span>文件<br> 1 file changed, 3 insertions(+), 1 deletion(-)<br><span class="hljs-comment"># commit命令只会提交暂存区的文件，未添加进暂存区的文件不会被commit命令提交</span><br><span class="hljs-comment"># ###########可以看到，提交后返回一些信息</span><br><span class="hljs-comment"># 当前是在哪个分支（develop）提交的 </span><br><span class="hljs-comment"># 本次提交的完整 SHA-1 # 校验和是什么（5902113）</span><br><span class="hljs-comment"># 以及在本次提交中，有多少文件修订过，多少行添改和删改过。</span><br></code></pre></td></tr></table></figure><h3 id="跳过暂存，直接将工作副本提交至版本库"><a href="#跳过暂存，直接将工作副本提交至版本库" class="headerlink" title="跳过暂存，直接将工作副本提交至版本库"></a>跳过暂存，直接将工作副本提交至版本库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git commit -a -m <span class="hljs-string">&#x27;added new benchmarks&#x27;</span><br>[master 83e38c7] added new benchmarks<br> 1 files changed, 5 insertions(+)<br><br><span class="hljs-comment"># 似乎不会提交未纳入版本控制的文件</span><br><span class="hljs-comment"># eg:新建了一个foo.txt，没有添加进暂存区</span><br><span class="hljs-comment"># 那么commit -a将不会为foo.txt创建版本，也不会提交此文件</span><br></code></pre></td></tr></table></figure><h3 id="创建文件夹和文件"><a href="#创建文件夹和文件" class="headerlink" title="创建文件夹和文件"></a>创建文件夹和文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建文件夹</span><br>$ <span class="hljs-built_in">mkdir</span> .note<br><span class="hljs-comment"># 在桌面GUI下，无法创建以“.”开头的文件夹和文件</span><br><br><span class="hljs-comment"># 创建文件</span><br>$ <span class="hljs-built_in">touch</span> .gitignore<br><br><span class="hljs-comment"># 查看文件</span><br>$ <span class="hljs-built_in">cat</span> .gitignore<br><span class="hljs-comment"># floders</span><br>.vs/<br><br><span class="hljs-comment"># Git Bash下运行的命令有些与Linux命令名称一致，有些与Windows命令名称一致</span><br></code></pre></td></tr></table></figure><h3 id="文本比较"><a href="#文本比较" class="headerlink" title="文本比较"></a>文本比较</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git diff<br>diff --git a/foo.txt b/foo.txt<br>index 2974b83..e8224ee 100644<br>--- a/foo.txt<br>+++ b/foo.txt<br>@@ -1 +1,3 @@<br>-add line 1<br>\ No newline at end of file<br>+----foo.txt<br>+add line 1<br>+add line 2<br>\ No newline at end of file<br><br></code></pre></td></tr></table></figure><h1 id="删除文件并移除版本控制"><a href="#删除文件并移除版本控制" class="headerlink" title="删除文件并移除版本控制"></a>删除文件并移除版本控制</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">rm</span> foo.txt<br><span class="hljs-built_in">rm</span> <span class="hljs-string">&#x27;foo.txt&#x27;</span><br><br>$ git status<br>On branch develop<br>Your branch is ahead of <span class="hljs-string">&#x27;origin/develop&#x27;</span> by 3 commits.<br>  (use <span class="hljs-string">&quot;git push&quot;</span> to publish your <span class="hljs-built_in">local</span> commits)<br>Changes to be committed:<br>  (use <span class="hljs-string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)<br><br>        deleted:    foo.txt<br><br>$ git commit -m <span class="hljs-string">&#x27;删除foo.txt&#x27;</span><br>[develop fb06b92] 删除foo.txt<br> 1 file changed, 3 deletions(-)<br> delete mode 100644 foo.txt<br><br></code></pre></td></tr></table></figure><h1 id="移除版本控制但不删除文件"><a href="#移除版本控制但不删除文件" class="headerlink" title="移除版本控制但不删除文件"></a>移除版本控制但不删除文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">rm</span> --cached bar.txt<br><span class="hljs-built_in">rm</span> <span class="hljs-string">&#x27;bar.txt&#x27;</span><br><br>$ git commit -a -m <span class="hljs-string">&#x27;移除bar.txt版本控制&#x27;</span><br><br><span class="hljs-comment"># 移除类型文件/目录版本控制</span><br>$ git <span class="hljs-built_in">rm</span> <span class="hljs-built_in">log</span>/\*.<span class="hljs-built_in">log</span><br><br></code></pre></td></tr></table></figure><h1 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">dir</span><br>bar.txt  test.txt<br><br>$ git <span class="hljs-built_in">mv</span> test.txt flus.txt<br><br>$ <span class="hljs-built_in">dir</span><br>bar.txt  flus.txt<br><br>$ git status<br>On branch develop<br>Your branch is ahead of <span class="hljs-string">&#x27;origin/develop&#x27;</span> by 6 commits.<br>  (use <span class="hljs-string">&quot;git push&quot;</span> to publish your <span class="hljs-built_in">local</span> commits)<br>Changes to be committed:<br>  (use <span class="hljs-string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)<br><br>        renamed:    test.txt -&gt; flus.txt<br><br><span class="hljs-comment">#其实，运行 git mv 就相当于运行了下面三条命令：</span><br>$ <span class="hljs-built_in">mv</span> README.txt README<br>$ git <span class="hljs-built_in">rm</span> README.txt<br>$ git add README<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建圆头矩形</title>
    <link href="/2020/01/11/%E5%88%9B%E5%BB%BA%E5%9C%86%E5%A4%B4%E7%9F%A9%E5%BD%A2/"/>
    <url>/2020/01/11/%E5%88%9B%E5%BB%BA%E5%9C%86%E5%A4%B4%E7%9F%A9%E5%BD%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="创建两端半圆的长方形"><a href="#创建两端半圆的长方形" class="headerlink" title="创建两端半圆的长方形"></a>创建两端半圆的长方形</h1><p>这里介绍创建一个两头半圆的横向矩形的方法，我称之为“圆头矩形”，就行下面这样。但是又不想给一个确定的高度值，或者说我想让圆头矩形可以自适应页面调整大小。</p><h2 id="首先一个非百分之百宽度的div"><a href="#首先一个非百分之百宽度的div" class="headerlink" title="首先一个非百分之百宽度的div"></a>首先一个非百分之百宽度的div</h2><p>其实一个盒子就够了，这里加入class&#x3D;box的div是要让class&#x3D;tiao的div水平居中</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;tiao&quot;</span>&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.tiao</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">7</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.tiao</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">20%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">10%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.tiao</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">20%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">10%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建两段圆形的形状的步骤"><a href="#创建两段圆形的形状的步骤" class="headerlink" title="创建两段圆形的形状的步骤"></a>创建两段圆形的形状的步骤</h2><h3 id="1-行内元素盒子tiao"><a href="#1-行内元素盒子tiao" class="headerlink" title="1 行内元素盒子tiao"></a>1 行内元素盒子tiao</h3><ul><li>一个具有初始宽度的行内元素，设置其宽度非100%，以下称tiao</li></ul><h3 id="2-设置tiao伪元素befor和after"><a href="#2-设置tiao伪元素befor和after" class="headerlink" title="2 设置tiao伪元素befor和after"></a>2 设置tiao伪元素befor和after</h3><ul><li>width和padding-top属性值设置为相同值，这个值决定了tiao形状的高度</li><li>背景颜色和条的别境颜色一致</li><li>before元素margin-left为before元素width取负值的一般</li><li>after元素margin-right为after元素width取负值的一般</li></ul><h3 id="3-Tips"><a href="#3-Tips" class="headerlink" title="3. Tips"></a>3. Tips</h3><ol><li>tiao元素display属性设置其他值没有测试，以上设置为inline-block可以通过设置父元素box的text-align属性为center方便地实现tiao居中。</li><li>这种实现背景色不支持半透明，否则会出现重叠，目前还没有想到解决办法</li></ol><h1 id="要求不那么严格的圆头矩形"><a href="#要求不那么严格的圆头矩形" class="headerlink" title="要求不那么严格的圆头矩形"></a>要求不那么严格的圆头矩形</h1><p>当然非强迫症患者仍然有另一种可能，那就是直接设置border-radius属性的水平和垂直半径不相同即可。像下面这样：</p><div style="background:#cbcbcb;width:50%;height:50px;border-radius:6%/50%;margin:0 auto;"></div><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.box</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>:<span class="hljs-number">#cbcbcb</span>;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>:<span class="hljs-number">50%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">6%</span>/<span class="hljs-number">50%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>这种方式写法简单，不断调试border-radius的水平和垂直方向上的取值达到满意的效果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建圆头矩形</title>
    <link href="/2020/01/11/%E9%83%A8%E7%BD%B2%E5%B0%8F%E8%AF%B4%E9%98%85%E8%AF%BB%E5%99%A8/"/>
    <url>/2020/01/11/%E9%83%A8%E7%BD%B2%E5%B0%8F%E8%AF%B4%E9%98%85%E8%AF%BB%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="yireader"><a href="#yireader" class="headerlink" title="yireader"></a>yireader</h1><p>开源阅读器，支持docker部署，支持自定义书源。部署自己的小说阅读器可以免广告啊。</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>有一台自己的服务器（centos&#x2F;其他linux服务器）</li><li>安装docker</li><li>安装docker-compose</li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="Step-1-安装docker"><a href="#Step-1-安装docker" class="headerlink" title="Step 1 安装docker"></a>Step 1 安装docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; docker -v<br>Docker version 20.10.6, build 370c289<br></code></pre></td></tr></table></figure><p>登录你的服务器，运行以上命令，如果输出类似上面的文字则证明你的机器上已经安装了dokcer。可以跳过这个步骤<br>docker 安装步骤</p><ul><li><p>卸载可能残留的与docker 相关的程序，以免产生依赖冲突</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; sudo yum remove docker \<br>                    docker-client \<br>                    docker-client-latest \<br>                    docker-common \<br>                    docker-latest \<br>                    docker-latest-logrotate \<br>                    docker-logrotate \<br>                    docker-selinux \<br>                    docker-engine-selinux \<br>                    docker-engine<br></code></pre></td></tr></table></figure></li><li><p>安装yum配置工具<br><code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></p></li><li><p>添加yun源<br><code>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code></p></li><li><p>安装docker命令行工具<br><code>sudo yum install docker-ce docker-ce-cli containerd.io</code></p></li><li><p>验证安装<br><code>docker -v</code></p></li></ul><h3 id="Step-2-安装docker-compose"><a href="#Step-2-安装docker-compose" class="headerlink" title="Step 2 安装docker-compose"></a>Step 2 安装docker-compose</h3><p>如果你的机器上没有wget，你可能需要先安装wget<code>sudo yum install wget -y</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/docker/</span>compose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.23.0-rc3/</span>docker-compose-Linux-x86_64<br>mv docker-compose-Linux-x86_64 <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br>chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br>docker-compose --version<br></code></pre></td></tr></table></figure><h3 id="Step-3-开始安装yireader"><a href="#Step-3-开始安装yireader" class="headerlink" title="Step 3 开始安装yireader"></a>Step 3 开始安装yireader</h3><p>安装步骤可以参考<a href="https://uhziel.github.io/yireader/user/deploy.html">官网描述</a>，我按照这个步骤第一次失败了。为了保险起见，还得检查下。</p><ul><li><p>拉取依赖的镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; sudo docker pull uhziel/yireader<br>&gt; sudo docker pull mongo:4.4-bionic<br></code></pre></td></tr></table></figure></li><li><p>检查是否有容器端口占用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; docker ps<br>CONTAINER ID   IMAGE              COMMAND                  CREATED          STATUS          PORTS                                       NAMES<br>ce00f4e8b797   uhziel/yireader    <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   24 minutes ago   Up 24 minutes   0.0.0.0:3001-&gt;3001/tcp, :::3001-&gt;3001/tcp   yireader_yireader_1<br>42158c27bb83   mongo:4.4-bionic   <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   24 minutes ago   Up 24 minutes   27017/tcp                                   yireader_db_1<br></code></pre></td></tr></table></figure><p>如果看到PORTS列有其正在运行的容器端口为3001，则表明yireader需要的端口已经被其他容器占用。<br>除docker外，也有可能其他程序占用了3001端口。</p></li></ul><p>如果端口被占用，有2种解决思路</p><ul><li><p>1 停止占用端口的容器&#x2F;程序</p></li><li><p>2 更改yireader依赖的端口</p></li><li><p>安装yireader<br>首先得进入你理想的安装目录，然后运行以下命令</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">mkdir yireader &amp;&amp; cd yireader</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">curl -<span class="hljs-variable constant_">OL</span> <span class="hljs-attr">https</span>:<span class="hljs-comment">//cdn.jsdelivr.net/gh/uhziel/yireader/docker-compose.yml</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">mkdir dbdata</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">docker-compose up -d</span><br>Creating yireader_db_1 ... <br>Creating yireader_db_1 ... done<br>Recreating yireader_yireader_1 ... <br>Recreating yireader_yireader_1 ... done<br># 如输出像上面，则证明docker已经创建了一个yireader容器<br># 检查容器状态<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">docker ps</span><br></code></pre></td></tr></table></figure><p>在浏览器输入<code>http://[你的服务器IP]:3001</code>就可以访问阅读器了。</p></li></ul><h3 id="step-4-使用"><a href="#step-4-使用" class="headerlink" title="step 4 使用"></a>step 4 使用</h3><p>大概需要注册、添加书源的操作后，才能开始读书。</p><ul><li>进入首页后，点击注册按钮注册用户</li><li>点左上角书源，输入<a href="https://github.com/LM-Firefly/booksource/tree/b225bc037106d1035727706ebecc24a0cfbd5fd0/sources">书源地址</a>，点添加<br>示例书源：<a href="https://raw.githubusercontent.com/LM-Firefly/booksource/b225bc037106d1035727706ebecc24a0cfbd5fd0/sources/%E7%AC%94%E8%B6%A3%E9%98%81%E5%84%BF.json">https://raw.githubusercontent.com/LM-Firefly/booksource/b225bc037106d1035727706ebecc24a0cfbd5fd0/sources/%E7%AC%94%E8%B6%A3%E9%98%81%E5%84%BF.json</a><br>如何<a href="https://uhziel.github.io/yireader/user/#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">添加书源</a></li><li>然后就可以在右上角搜书了</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>软件安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
